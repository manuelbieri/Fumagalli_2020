window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "Fumagalli_Motta_Tarantino_2020", "modulename": "Fumagalli_Motta_Tarantino_2020", "type": "module", "doc": "<p><img src=\"https://github.com/manuelbieri/Fumagalli_2020/actions/workflows/CI.yml/badge.svg\" alt=\"CI\" />\n<a href=\"https://github.com/manuelbieri/Fumagalli_2020/actions/workflows/CodeCov.yml\"><img src=\"https://github.com/manuelbieri/Fumagalli_2020/actions/workflows/CodeCov.yml/badge.svg\" alt=\"CodeCov\" /></a>\n<a href=\"https://codecov.io/gh/manuelbieri/Fumagalli_2020\"><img src=\"https://codecov.io/gh/manuelbieri/Fumagalli_2020/branch/master/graph/badge.svg?token=RRZ3PJI9U1\" alt=\"codecov\" /></a>\n<a href=\"https://github.com/manuelbieri/Fumagalli_2020/actions/workflows/codeql-analysis.yml\"><img src=\"https://github.com/manuelbieri/Fumagalli_2020/actions/workflows/codeql-analysis.yml/badge.svg\" alt=\"CodeQL\" /></a>\n<a href=\"https://github.com/psf/black\"><img src=\"https://img.shields.io/badge/code%20style-black-000000.svg\" alt=\"Code style: black\" /></a>\n<a href=\"https://github.com/manuelbieri/Fumagalli_2020/actions/workflows/Black.yml\"><img src=\"https://github.com/manuelbieri/Fumagalli_2020/actions/workflows/Black.yml/badge.svg\" alt=\"Code Style Check\" /></a>\n<a href=\"https://www.codefactor.io/repository/github/manuelbieri/fumagalli_2020\"><img src=\"https://www.codefactor.io/repository/github/manuelbieri/fumagalli_2020/badge\" alt=\"CodeFactor\" /></a>\n<a href=\"https://github.com/manuelbieri/Fumagalli_2020\"><img src=\"https://img.shields.io/github/repo-size/manuelbieri/Fumagalli_2020\" alt=\"GitHub repo size\" /></a>\n<img src=\"https://img.shields.io/github/license/manuelbieri/Fumagalli_2020\" alt=\"GitHub license\" />\n<img src=\"https://img.shields.io/github/last-commit/manuelbieri/Fumagalli_2020\" alt=\"GitHub last commit\" />\n<img src=\"https://img.shields.io/github/release-date/manuelbieri/Fumagalli_2020\" alt=\"GitHub Release Date\" />\n<a href=\"https://pypi.org/project/Fumagalli-Motta-Tarantino-2020/\"><img src=\"https://img.shields.io/github/v/release/manuelbieri/Fumagalli_2020\" alt=\"GitHub release (latest by date)\" /></a></p>\n\n<h3 id=\"basic-usage\">Basic Usage</h3>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">Fumagalli_Motta_Tarantino_2020.Model</span> <span class=\"k\">as</span> <span class=\"nn\">Model</span>\n\n<span class=\"c1\"># initialize the model (here you can adjust the parameters of the model)</span>\n<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">Model</span><span class=\"o\">.</span><span class=\"n\">MergerPolicyModel</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"o\">.</span><span class=\"n\">MergerPolicyModel</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># print a summary of the outcome</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">summary</span><span class=\"p\">())</span>\n</code></pre></div>\n\n<p>Find the latest documentation on <a href=\"https://manuelbieri.ch/Fumagalli_2020/\">manuelbieri.ch/fumagalli_2020</a>.</p>\n\n<h3 id=\"dependencies\">Dependencies</h3>\n\n<p>These packages include all the needed imports for the functionality of this package.</p>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:left;\">Package &emsp;</th>\n  <th style=\"text-align:center;\">Version &emsp;</th>\n  <th style=\"text-align:left;\">Annotation &emsp;</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:left;\">scipy</td>\n  <td style=\"text-align:center;\">1.8.0</td>\n  <td style=\"text-align:left;\">Always</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">numpy</td>\n  <td style=\"text-align:center;\">1.22.3</td>\n  <td style=\"text-align:left;\">Always</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">black</td>\n  <td style=\"text-align:center;\">22.1.0</td>\n  <td style=\"text-align:left;\">For consistent code formatting</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">jupyter</td>\n  <td style=\"text-align:center;\">1.0.0</td>\n  <td style=\"text-align:left;\">For the demonstration in jupyter Notebooks</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">IPython</td>\n  <td style=\"text-align:center;\">8.2.0</td>\n  <td style=\"text-align:left;\">For the demonstration in jupyter Notebooks</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">pdoc</td>\n  <td style=\"text-align:center;\">11.0.0</td>\n  <td style=\"text-align:left;\">To generate the documentation from scratch</td>\n</tr>\n</tbody>\n</table>\n\n<p>Install the dependencies with the following command:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>$ pip install -r requirements.txt\n</code></pre></div>\n\n<p>(Note: Make sure you are operating in the same directory, where the <code>requirements.txt</code> is located.)</p>\n\n<h3 id=\"tests\">Tests</h3>\n\n<p>Run the unittests shipped in Fumagalli_Motta_Tarantino_2020.tests with the following command (pay attention to the current working directory):</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>python -m unittest discover Fumagalli_Motta_Tarantino_2020/tests <span class=\"s2\">&quot;Test_*.py&quot;</span>\n</code></pre></div>\n\n<p>See <a href=\"https://app.codecov.io/gh/manuelbieri/Fumagalli_2020\">codecov.io</a> for a detailed report about the test coverage.</p>\n\n<h3 id=\"generate-documentation\">Generate Documentation</h3>\n\n<p>Generate the documentation with the following command:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>$ pdoc -o docs Fumagalli_Motta_Tarantino_2020 --docformat numpy --math\n</code></pre></div>\n\n<p>or run the shell-script <code>docs/build.sh</code> in the terminal.</p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.BaseModel", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "BaseModel", "type": "class", "doc": "<p>There are three players in our game: an Antitrust Authority (AA), which at the beginning of the game decides its\nmerger policy; a monopolist $       {I}$ncumbent; and a $   {S}$tart-up. The start-up owns a \u201cprototype\u201d (or project)\nthat, if developed, can give rise to an innovation: for instance a substitute/higher quality product to the\nincumbent\u2019s existing product, or a more efficient production process. The start-up does not have enough own\nresources to develop the project. It has two options: it can either obtain additional funds from competitive\ncapital markets, or sell out to the incumbent. The incumbent will have to decide whether and when it wants to\nacquire the start-up (and if it does so before product development, it has to decide whether to develop the\nprototype or shelve it), conditional on the AA\u2019s approval of the acquisition. We assume that the takeover\ninvolves a negligible but positive transaction cost. The AA commits at the beginning of the game to a merger\npolicy, in the form of a maximum threshold of \u201charm\u201d, that it is ready to tolerate. Harm from a proposed merger\nconsists of the difference between the expected welfare levels if the merger goes ahead, and in the counterfactual\nwhere it does not take place (derived of course by correctly anticipating the continuation equilibrium of the\ngame). A proposed merger will be prohibited only if the tolerated harm level H is lower than the expected harm\nfrom the merger, if any.</p>\n\n<p>Timing of the game:</p>\n\n<table>\n<thead>\n<tr>\n  <th>Time</th>\n  <th>Action</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>0</td>\n  <td>The AA commits to the standard for merger approval, $\\bar{H}$.</td>\n</tr>\n<tr>\n  <td>1(a)</td>\n  <td>$  {I}$ can make a takeover offer to $     {S}$, which can accept or reject.</td>\n</tr>\n<tr>\n  <td>1(b)</td>\n  <td>The AA approves or blocks the takeover proposal.</td>\n</tr>\n<tr>\n  <td>1(c)</td>\n  <td>The firm ($        {I}$ or $       {S}$) that owns the prototype decides whether to develop or shelve it.</td>\n</tr>\n<tr>\n  <td>1(d)</td>\n  <td>The owner of the prototype engages in financial contracting (if needed). After that, uncertainty about the success or failure of the project resolves.</td>\n</tr>\n<tr>\n  <td>2(a)</td>\n  <td>$  {I}$ can make a take-it-or-leave-it offer to $  {S}$ (if it did not already buy it at t = 1, and if the development of the project was successful).</td>\n</tr>\n<tr>\n  <td>2(b)</td>\n  <td>The AA approves or blocks the takeover proposal.</td>\n</tr>\n<tr>\n  <td>3</td>\n  <td>Active firms sell in the product market, payoffs are realised and contracts are honored.</td>\n</tr>\n</tbody>\n</table>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.BaseModel.__init__", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "BaseModel.__init__", "type": "function", "doc": "<p>Initializes a valid base model according to the assumptions given in the paper.</p>\n\n<p>The following assumptions have to be met:</p>\n\n<table>\n<thead>\n<tr>\n  <th>Condition</th>\n  <th>Remark</th>\n  <th>Page (Assumption)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>$\\bar{H} \\ge 0$</td>\n  <td>The tolerated level of harm has to be bigger than 0.</td>\n  <td>p.6</td>\n</tr>\n<tr>\n  <td>$p \\in (0,1]$</td>\n  <td>Probability that the prototype is developed successfully depends on the non-contractible effort exerted by the entrepreneur of the firm that owns the project. In case of no effort the project fails for sure, but the entrepreneur obtains a positive private benefit. In case of failure the project yields no profit.</td>\n  <td>p.8</td>\n</tr>\n<tr>\n  <td>$B>0$</td>\n  <td>Private benefit of the entrepreneur in case of failure.</td>\n  <td>p.8</td>\n</tr>\n<tr>\n  <td>$A \\in (0,K)$</td>\n  <td>The startup does not hold sufficient assets at the beginning to cover the costs.</td>\n  <td>p.8</td>\n</tr>\n<tr>\n  <td>$\\pi^m_I>\\pi^d_I$</td>\n  <td>Profit of the incumbent has to be bigger without the innovation than in the duopoly.</td>\n  <td>p.7</td>\n</tr>\n<tr>\n  <td>$\\pi^M_I>\\pi^m_I$</td>\n  <td>Industry profits are higher with a multi-product monopolist than a single product monopolist (otherwise, the incumbent would always shelve).</td>\n  <td>p.7</td>\n</tr>\n<tr>\n  <td>$CS^M \\ge CS^m$</td>\n  <td>Consumer surplus with the innovation has to weakly bigger than without the innovation (consumers like variety).</td>\n  <td>p.7</td>\n</tr>\n<tr>\n  <td>$\\pi^M_I>\\pi^d_I+\\pi^d_S$</td>\n  <td>Industry profits are higher under monopoly than under duopoly. If this assumption did not hold, the takeover would not take place.</td>\n  <td>p.7 (A1)</td>\n</tr>\n<tr>\n  <td>$\\pi^d_S>\\pi^M_I-\\pi^m_I$</td>\n  <td>An incumbent has less incentive to innovate (in a new/better product or a more efficient production process) than a potential entrant because the innovation would cannibalise the incumbent\u2019s current profits. (Corresponds to Arrow's replacement effect)</td>\n  <td>p.7 (A2)</td>\n</tr>\n<tr>\n  <td>$p\\pi^d_S>K$</td>\n  <td>In case of effort it is efficient to develop the prototype, i.e., development has a positive net present value (NPV) for the start-up</td>\n  <td>p.8 (A3)</td>\n</tr>\n<tr>\n  <td>$p(W^M-W^m)&gt;K$</td>\n  <td>The development of the project is not only privately beneficial for the start-up, but also for society as a whole, whether undertaken by the incumbent or the start-up (implies $\\;p(W^d-W^m)&gt;K\\;$).</td>\n  <td>p.8 (A4)</td>\n</tr>\n<tr>\n  <td>$B-K&lt;0$$B-(p\\pi^d_S-K)&gt;0$</td>\n  <td>The first inequality implies that if S shirks the project has negative value; thus, no financial contract could be signed unless the startup makes effort. The second implies that the start-up may be financially constrained, that is, it may hold insufficient assets to fund the development of the prototype even though the project has a positive NPV.</td>\n  <td>p.8 (A5)</td>\n</tr>\n</tbody>\n</table>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tolerated_level_of_harm</strong> (float):\n($\\bar{H}$) The AA commits at the beginning of the game to a merger policy, in the form of a maximum threshold of \u201charm\u201d, that it is ready to tolerate.</li>\n<li><strong>development_costs</strong> (float):\n($K$) Fixed costs to invest for development.</li>\n<li><strong>startup_assets</strong> (float):\n($A$) Assets of the startup at the beginning.</li>\n<li><strong>success_probability</strong> (float):\n($p$) Probability of success in case of effort (otherwise the projects fails for sure).</li>\n<li><strong>development_success</strong> (bool):\nDecides whether an attempted development will be successful (true $\\rightarrow$ attempted development succeeds).</li>\n<li><strong>private_benefit</strong> (float):\n($B$) Private benefit of the entrepreneur in case of failure.</li>\n<li><strong>consumer_surplus_without_innovation</strong> (float):\n($CS^m$) Consumer surplus for the case that the innovation is not introduced by the incumbent into the market.</li>\n<li><strong>incumbent_profit_without_innovation</strong> (float):\n($\\pi^m_I$) Profit of the monopolist with a single product (without innovation).</li>\n<li><strong>consumer_surplus_duopoly</strong> (float):\n($CS^d$) Consumer surplus for the case that the innovation is introduced into the market and a duopoly exists.</li>\n<li><strong>incumbent_profit_duopoly</strong> (float):\n($\\pi^d_I$) Profit of the incumbent in the case of a duopoly.</li>\n<li><strong>startup_profit_duopoly</strong> (float):\n($\\pi^d_S$) Profit of the startup in the case of a duopoly.</li>\n<li><strong>consumer_surplus_with_innovation</strong> (float):\n($CS^M$) Consumer surplus for the case that the innovation is introduced by the incumbent into the market.</li>\n<li><strong>incumbent_profit_with_innovation</strong> (float):\n($\\pi^M_I$) Profit of the monopolist with multiple products (with innovation).</li>\n</ul>\n", "signature": "(\n    self,\n    tolerated_level_of_harm: float = 0,\n    development_costs: float = 0.1,\n    startup_assets: float = 0.05,\n    success_probability: float = 0.7,\n    development_success: bool = True,\n    private_benefit: float = 0.05,\n    consumer_surplus_without_innovation: float = 0.2,\n    incumbent_profit_without_innovation: float = 0.4,\n    consumer_surplus_duopoly: float = 0.5,\n    incumbent_profit_duopoly: float = 0.2,\n    startup_profit_duopoly: float = 0.2,\n    consumer_surplus_with_innovation: float = 0.3,\n    incumbent_profit_with_innovation: float = 0.5\n)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.BaseModel.tolerated_harm", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "BaseModel.tolerated_harm", "type": "variable", "doc": "<p>($\\bar{H}$) The AA commits at the beginning of the game to a merger policy, in the form of a maximum threshold of \u201charm\u201d, that it is ready to tolerate.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.BaseModel.development_costs", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "BaseModel.development_costs", "type": "variable", "doc": "<p>($K$) Fixed costs to invest for development.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.BaseModel.startup_assets", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "BaseModel.startup_assets", "type": "variable", "doc": "<p>($A$) Assets of the startup at the beginning.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.BaseModel.success_probability", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "BaseModel.success_probability", "type": "variable", "doc": "<p>($p$) Probability of success in case of effort (otherwise the projects fails for sure).</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.BaseModel.development_success", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "BaseModel.development_success", "type": "variable", "doc": "<p>Decides whether an attempted development will be successful.</p>\n\n<p>If true, every attempted development will be successful.</p>\n", "annotation": ": bool"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.BaseModel.private_benefit", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "BaseModel.private_benefit", "type": "variable", "doc": "<p>($B$) Private benefit of the entrepreneur in case of failure.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.BaseModel.incumbent_profit_with_innovation", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "BaseModel.incumbent_profit_with_innovation", "type": "variable", "doc": "<p>($\\pi^M_I$) Profit of the monopolist with multiple products (with innovation).</p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.BaseModel.cs_with_innovation", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "BaseModel.cs_with_innovation", "type": "variable", "doc": "<p>($CS^M$) Consumer surplus for the case that the innovation is introduced by the incumbent into the market.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.BaseModel.w_with_innovation", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "BaseModel.w_with_innovation", "type": "variable", "doc": "<p>($W^M$) Total welfare for the case that the innovation is introduced by the incumbent into the market.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.BaseModel.incumbent_profit_without_innovation", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "BaseModel.incumbent_profit_without_innovation", "type": "variable", "doc": "<p>($\\pi^m_I$) Profit of the monopolist with a single product (without innovation).</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.BaseModel.cs_without_innovation", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "BaseModel.cs_without_innovation", "type": "variable", "doc": "<p>($CS^m$) Consumer surplus for the case that the innovation is not introduced by the incumbent into the market.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.BaseModel.w_without_innovation", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "BaseModel.w_without_innovation", "type": "variable", "doc": "<p>($W^m$) Total welfare for the case that the innovation is not introduced by the incumbent into the market.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.BaseModel.startup_profit_duopoly", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "BaseModel.startup_profit_duopoly", "type": "variable", "doc": "<p>($\\pi^d_S$) Profit of the startup in the case of a duopoly.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.BaseModel.incumbent_profit_duopoly", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "BaseModel.incumbent_profit_duopoly", "type": "variable", "doc": "<p>($\\pi^d_I$) Profit of the incumbent in the case of a duopoly.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.BaseModel.cs_duopoly", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "BaseModel.cs_duopoly", "type": "variable", "doc": "<p>($CS^d$) Consumer surplus for the case that the innovation is introduced into the market and a duopoly exists.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.BaseModel.w_duopoly", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "BaseModel.w_duopoly", "type": "variable", "doc": "<p>($W^d$) Total welfare for the case that the innovation is introduced into the market and a duopoly exists.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.MergerPolicyModel", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "MergerPolicyModel", "type": "class", "doc": "<p>In this class all merger policies and their respective outcomes are considered.</p>\n\n<p>Available merger policies are:</p>\n\n<ul>\n<li>Strict: The AA authorises only takeovers that, at the moment in which they are reviewed, are expected to increase total welfare.</li>\n<li>Intermediate (late takeover prohibited): The AA blocks late takeovers, but is more lenient with early takeovers.</li>\n<li>Intermediate (late takeover allowed): The AA authorises late takeovers, but is stricter with early takeovers.</li>\n<li>Laissez-faire: The intervention threshold of the AA is so high that any acquisition would be allowed.</li>\n</ul>\n", "bases": "BaseModel"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.MergerPolicyModel.__init__", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "MergerPolicyModel.__init__", "type": "function", "doc": "<p>Takes the same arguments as BaseModel.__init__.</p>\n", "signature": "(self, **kwargs)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.MergerPolicyModel.merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "MergerPolicyModel.merger_policy", "type": "variable", "doc": "<p>Returns the merger policy used to determine the outcome.</p>\n", "annotation": ": Literal['Strict', 'Intermediate (late takeover prohibited)', 'Intermediate (late takeover allowed)', 'Laissez-faire']"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.MergerPolicyModel.asset_threshold", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "MergerPolicyModel.asset_threshold", "type": "variable", "doc": "<p>Threshold level $\\bar{A} = B - (\\pi^d_S - K)$</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.MergerPolicyModel.asset_threshold_cdf", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "MergerPolicyModel.asset_threshold_cdf", "type": "variable", "doc": "<p>Returns the value of the continuous distribution function for the asset threshold.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.MergerPolicyModel.asset_threshold_late_takeover", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "MergerPolicyModel.asset_threshold_late_takeover", "type": "variable", "doc": "<p>The prospect that the start-up will be acquired at $t = 2$ alleviates financial constraints: there exists a\nthreshold level $\\bar{A}^T = B - (\\pi_I^M - K)$</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.MergerPolicyModel.asset_threshold_laissez_faire_cdf", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "MergerPolicyModel.asset_threshold_laissez_faire_cdf", "type": "variable", "doc": "<p>Returns the value of the continuous distribution function for the asset threshold under laissez-faire.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.MergerPolicyModel.get_early_bidding_type", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "MergerPolicyModel.get_early_bidding_type", "type": "variable", "doc": "<p>Returns the bidding attempt of the incumbent at $t = 1$.</p>\n\n<p>Possible options of an actual attempt:</p>\n\n<ul>\n<li>Pooling: The incumbent offers a high takeover price such that a start-up would always accept, irrespective of the amount of own assets.</li>\n<li>Separating: The incumbent offers a low takeover price targeting only the credit-rationed start-ups.</li>\n</ul>\n\n<p>Otherwise, the option 'No' is returned.</p>\n", "annotation": ": Literal['No', 'Separating', 'Pooling']"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.MergerPolicyModel.get_late_bidding_type", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "MergerPolicyModel.get_late_bidding_type", "type": "variable", "doc": "<p>Returns the bidding attempt of the incumbent at $t = 2$.</p>\n\n<p>Possible options of an actual attempt:</p>\n\n<ul>\n<li>'Pooling': The incumbent offers a high takeover price such that a start-up would always accept, irrespective of the amount of own assets.</li>\n<li>'Separating': The incumbent offers a low takeover price targeting only the credit-rationed start-ups.</li>\n</ul>\n\n<p>Otherwise, the option 'No' is returned.</p>\n", "annotation": ": Literal['No', 'Separating', 'Pooling']"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.MergerPolicyModel.is_owner_investing", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "MergerPolicyModel.is_owner_investing", "type": "variable", "doc": "<p>A start-up that expects external investors to deny financing will not undertake the investment. Conversely, the incumbent\nhas the financial ability to invest, but it does not always have the incentive to do so. Indeed, the innovation\nincreases the incumbent\u2019s profits less than the (unconstrained) start-up\u2019s. (This result follows directly from\nthe Arrow\u2019s replacement effect) The increase in the incumbent\u2019s profits may not be large enough to cover the investment\ncost. When this is the case, the incumbent will shelve the project and the acquisition turns out to be a killer acquisition.</p>\n\n<p>Investment decision under the strict merger policy:</p>\n\n<ul>\n<li>An unconstrained start-up always invests in the development of the prototype.</li>\n<li>The incumbent invests if (and only if): $p*(\\pi^M_I-\\pi^m_I) \\ge K$</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If the owner of the innovation at $t=1$ invests in the project, instead of shelving.</li>\n</ul>\n", "annotation": ": bool"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.MergerPolicyModel.is_development_successful", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "MergerPolicyModel.is_development_successful", "type": "variable", "doc": "<p>Returns whether the development was successful or not.</p>\n\n<p>The following two conditions have to be satisfied:</p>\n\n<ul>\n<li>The owner of the product at $t=1$ has to invest in the development</li>\n<li>The development success variable has to be set to True (attempted development always successful).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If both conditions are met.</li>\n</ul>\n", "annotation": ": bool"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.MergerPolicyModel.is_startup_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "MergerPolicyModel.is_startup_credit_rationed", "type": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.MergerPolicyModel.asset_distribution_threshold_strict", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "MergerPolicyModel.asset_distribution_threshold_strict", "type": "variable", "doc": "<p>Threshold defined in Lemma 3 :$\\;\\Gamma(\\cdot)=\\frac{p(W^d-W^M)}{p(W^d-W^m)-K}$</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.MergerPolicyModel.asset_distribution_threshold", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "MergerPolicyModel.asset_distribution_threshold", "type": "variable", "doc": "<p>Threshold defined in Condition 3 :$\\;\\Phi(\\cdot)=\\frac{p(\\pi^M_I-\\pi^d_I-\\pi^d_S)}{p(\\pi^M_I-\\pi^d_I)-K}$</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.MergerPolicyModel.asset_distribution_threshold_laissez_faire", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "MergerPolicyModel.asset_distribution_threshold_laissez_faire", "type": "variable", "doc": "<p>Threshold defined in Condition 4 :$\\;\\Phi^T(\\cdot)=\\frac{p(\\pi^m_I-\\pi^M_I)+K}{p(\\pi^m_I+\\pi^d_S-\\pi^M_I)}$</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.MergerPolicyModel.asset_distribution_threshold_intermediate", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "MergerPolicyModel.asset_distribution_threshold_intermediate", "type": "variable", "doc": "<p>Threshold defined in A-3 :$\\;\\Phi^{\\prime}(\\cdot)=\\frac{p(\\pi^m_I-\\pi^d_I-\\pi^d_S)+K}{p(\\pi^m_I+\\pi^d_I)}$</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.MergerPolicyModel.is_early_takeover", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "MergerPolicyModel.is_early_takeover", "type": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.MergerPolicyModel.is_late_takeover", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "MergerPolicyModel.is_late_takeover", "type": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.MergerPolicyModel.is_incumbent_expected_to_shelve", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "MergerPolicyModel.is_incumbent_expected_to_shelve", "type": "function", "doc": "<p>Returns whether the incumbent is expected to shelve, whenever it acquires the entrant (Condition 1).</p>\n\n<ul>\n<li><p>True (expected to shelve): $p*(\\pi^M_I-\\pi^m_I) &lt; K$</p></li>\n<li><p>False (not expected to shelve): $p*(\\pi^M_I-\\pi^m_I) \\ge K$</p></li>\n</ul>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.MergerPolicyModel.incumbent_expected_additional_profit_from_innovation", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "MergerPolicyModel.incumbent_expected_additional_profit_from_innovation", "type": "function", "doc": "<p>Returns the additional expected profit for the incumbent, if it does not shelve the product after an acquisition.</p>\n\n<p>$ Expected \\; additional \\; profit = p*(\\pi^M_I-\\pi^m_I)-K$</p>\n", "signature": "(self) -> float", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.MergerPolicyModel.summary", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "MergerPolicyModel.summary", "type": "function", "doc": "<p>Returns the calculated outcome of the model with the defined parameters.</p>\n\n<p>The resulting dictionary contains the following information (and keys):</p>\n\n<ul>\n<li>'credit_rationed' : True, if the start-up is credit rationed.</li>\n<li>'early_bidding_type' : 'No', 'Pooling' or 'Separating' -> Defines the bidding type of the incumbent at t=1.</li>\n<li>'late_bidding_type' : 'No', 'Pooling' or 'Separating' -> Defines the bidding type of the incumbent at t=2.</li>\n<li>'development_attempt' : True, if the owner (start-up or incumbent after a takeover) tries to develop the product.</li>\n<li>'development_outcome' : True, if the product is developed successfully.</li>\n<li>'early_takeover' : True, if a takeover takes place at $t=1$.</li>\n<li>'late_takeover' : True, if a takeover takes place at $t=2$.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, any]</strong>: Containing the result of the model with the defined parameters.</li>\n</ul>\n", "signature": "(self) -> Dict[str, <built-in function any>]", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.OptimalMergerPolicy", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "OptimalMergerPolicy", "type": "class", "doc": "<p>In this class all merger policies and their respective outcomes are considered.</p>\n\n<p>Available merger policies are:</p>\n\n<ul>\n<li>Strict: The AA authorises only takeovers that, at the moment in which they are reviewed, are expected to increase total welfare.</li>\n<li>Intermediate (late takeover prohibited): The AA blocks late takeovers, but is more lenient with early takeovers.</li>\n<li>Intermediate (late takeover allowed): The AA authorises late takeovers, but is stricter with early takeovers.</li>\n<li>Laissez-faire: The intervention threshold of the AA is so high that any acquisition would be allowed.</li>\n</ul>\n", "bases": "MergerPolicyModel"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.OptimalMergerPolicy.__init__", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "OptimalMergerPolicy.__init__", "type": "function", "doc": "<p>Takes the same arguments as BaseModel.__init__.</p>\n", "signature": "(self, **kwargs)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.OptimalMergerPolicy.is_strict_beneficial_compared_to_laissez_faire", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "OptimalMergerPolicy.is_strict_beneficial_compared_to_laissez_faire", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.OptimalMergerPolicy.is_strict_beneficial_compared_to_intermediate", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "OptimalMergerPolicy.is_strict_beneficial_compared_to_intermediate", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.OptimalMergerPolicy.get_optimal_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "OptimalMergerPolicy.get_optimal_merger_policy", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self\n) -> Literal['Strict', 'Intermediate (late takeover prohibited)', 'Intermediate (late takeover allowed)', 'Laissez-faire']", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.OptimalMergerPolicy.is_laissez_faire_optimal", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "OptimalMergerPolicy.is_laissez_faire_optimal", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.OptimalMergerPolicy.is_intermediate_optimal", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "OptimalMergerPolicy.is_intermediate_optimal", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.OptimalMergerPolicy.is_financial_imperfection_severe", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "OptimalMergerPolicy.is_financial_imperfection_severe", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.OptimalMergerPolicy.is_early_takeover_followed_by_shelving_optimal", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "OptimalMergerPolicy.is_early_takeover_followed_by_shelving_optimal", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Model.OptimalMergerPolicy.threshold_approved_takeover_followed_pooling_offer", "modulename": "Fumagalli_Motta_Tarantino_2020.Model", "qualname": "OptimalMergerPolicy.threshold_approved_takeover_followed_pooling_offer", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> float", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests", "modulename": "Fumagalli_Motta_Tarantino_2020.tests", "type": "module", "doc": "<h1 id=\"explanations-about-the-unittests\">Explanations about the Unittests</h1>\n\n<p>In this file the different Test cases used, are explained. Tests written in bold letters are not yet implemented, but needed for full coverage.</p>\n\n<h2 id=\"glossary-about-the-naming-of-tests\">Glossary about the naming of tests</h2>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:left;\">Part of name</th>\n  <th style=\"text-align:left;\">Remark</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:left;\"><em>not_profitable</em></td>\n  <td style=\"text-align:left;\">$p(\\pi^M_I-\\pi^m_I) &lt; K$ is satisfied</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><em>profitable</em></td>\n  <td style=\"text-align:left;\">$p(\\pi^M_I-\\pi^m_I) \\ge K$ is satisfied</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><em>below_assets_threshold</em></td>\n  <td style=\"text-align:left;\">$F &lt; \\Phi$ is satisfied</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><em>above_assets_threshold</em></td>\n  <td style=\"text-align:left;\">$F \\ge \\Phi$ is satisfied</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><em>credit_rationed</em></td>\n  <td style=\"text-align:left;\">The start-up is credit constraint</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><em>not_credit_rationed</em></td>\n  <td style=\"text-align:left;\">The start-up is not credit constraint</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><em>unsuccessful</em></td>\n  <td style=\"text-align:left;\">The development (if it will take place) is unsuccessful, otherwise we will assume the development was successful</td>\n</tr>\n</tbody>\n</table>\n\n<p>$F$ may correspond to $F(\\bar{A})$ or $F(\\bar{A}^T)$ and $\\Phi$ to $\\Phi(\\cdot)$, $\\Phi^\\prime(\\cdot)$ or $\\Phi^T(\\cdot)$.</p>\n\n<h2 id=\"testbasemodel\">TestBaseModel</h2>\n\n<p>This testcase includes tests for the following matters:</p>\n\n<ul>\n<li>Test properties (public access for private variables)</li>\n<li>Test necessary conditions for correct values (see pre- and post-conditions)</li>\n</ul>\n\n<h2 id=\"testmergerpolicymodel\">TestMergerPolicyModel</h2>\n\n<p>This  testcase tests, whether the default model properly works.</p>\n\n<h2 id=\"testlaissezfairemergerpolicymodel\">TestLaissezFaireMergerPolicyModel</h2>\n\n<p>This testcase tests, whether the implemented logic for a laissez-faire merger policy works as expected. The following tests are included:</p>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:left;\">Name of test</th>\n  <th style=\"text-align:center;\">Is the start-up credit rationed?</th>\n  <th style=\"text-align:center;\">Early bidding type (t=1)</th>\n  <th style=\"text-align:center;\">Late bidding type (t=2)</th>\n  <th style=\"text-align:center;\">Development attempt?</th>\n  <th style=\"text-align:center;\">Development success</th>\n  <th style=\"text-align:center;\">Early takeover (t=1)</th>\n  <th style=\"text-align:center;\">Late takeover (t=2)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_below_assets_threshold_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_above_assets_threshold_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_above_assets_threshold_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">True</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_below_assets_threshold_not_credit_rationed_unsuccessful</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Separating</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Separating</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">True</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_not_credit_rationed_unsuccessful</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Separating</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n</tbody>\n</table>\n\n<h2 id=\"testintermediatelatetakeoverallowedmergerpolicymodel\">TestIntermediateLateTakeoverAllowedMergerPolicyModel</h2>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:left;\">Name of test</th>\n  <th style=\"text-align:center;\">Is the start-up credit rationed?</th>\n  <th style=\"text-align:center;\">Early bidding type (t=1)</th>\n  <th style=\"text-align:center;\">Late bidding type (t=2)</th>\n  <th style=\"text-align:center;\">Development attempt?</th>\n  <th style=\"text-align:center;\">Development success</th>\n  <th style=\"text-align:center;\">Early takeover (t=1)</th>\n  <th style=\"text-align:center;\">Late takeover (t=2)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">True</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_not_credit_rationed_unsuccessful</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Separating</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Separating</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">True</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_not_credit_rationed_unsuccessful</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Separating</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n</tbody>\n</table>\n\n<h2 id=\"testintermediatelatetakeoverprohibitedmergerpolicymodel\">TestIntermediateLateTakeoverProhibitedMergerPolicyModel</h2>\n\n<p>This testcase tests, whether the implemented logic for a intermediate merger policy (late takeovers are prohibited) works as expected. The following tests are included:</p>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:left;\">Name of test</th>\n  <th style=\"text-align:center;\">Is the start-up credit rationed?</th>\n  <th style=\"text-align:center;\">Early bidding type (t=1)</th>\n  <th style=\"text-align:center;\">Late bidding type (t=2)</th>\n  <th style=\"text-align:center;\">Development attempt?</th>\n  <th style=\"text-align:center;\">Development success</th>\n  <th style=\"text-align:center;\">Early takeover (t=1)</th>\n  <th style=\"text-align:center;\">Late takeover (t=2)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_below_assets_threshold_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_above_assets_threshold_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_above_assets_threshold_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Separating</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_above_assets_threshold_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Separating</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_below_assets_threshold_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_below_assets_threshold_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n</tbody>\n</table>\n\n<h2 id=\"teststrictmergerpolicymodel\">TestStrictMergerPolicyModel</h2>\n\n<p>This testcase tests, whether the implemented logic for a strict merger policy works as expected. The following tests are included:</p>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:left;\">New Name of test</th>\n  <th style=\"text-align:center;\">Is the start-up credit rationed?</th>\n  <th style=\"text-align:center;\">Early bidding type (t=1)</th>\n  <th style=\"text-align:center;\">Late bidding type (t=2)</th>\n  <th style=\"text-align:center;\">Development attempt?</th>\n  <th style=\"text-align:center;\">Development success</th>\n  <th style=\"text-align:center;\">Early takeover (t=1)</th>\n  <th style=\"text-align:center;\">Late takeover (t=2)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_below_assets_threshold_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_below_assets_threshold_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_above_assets_threshold_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Separating</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_above_assets_threshold_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Separating</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n</tbody>\n</table>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestBaseModel", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestBaseModel", "type": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestBaseModel.test_valid_setup_default_values", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestBaseModel.test_valid_setup_default_values", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestBaseModel.get_default_value", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestBaseModel.get_default_value", "type": "function", "doc": "<p></p>\n", "signature": "(arg_name: str) -> float", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestBaseModel.get_welfare_value", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestBaseModel.get_welfare_value", "type": "function", "doc": "<p></p>\n", "signature": "(self, market_situation: str) -> float", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestBaseModel.test_invalid_tolerated_harm", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestBaseModel.test_invalid_tolerated_harm", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestBaseModel.test_invalid_private_benefit", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestBaseModel.test_invalid_private_benefit", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestBaseModel.test_invalid_profit", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestBaseModel.test_invalid_profit", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestBaseModel.test_invalid_consumer_surplus", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestBaseModel.test_invalid_consumer_surplus", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestBaseModel.test_invalid_success_probability", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestBaseModel.test_invalid_success_probability", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestBaseModel.test_properties", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestBaseModel.test_properties", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestBaseModel.test_welfare_properties", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestBaseModel.test_welfare_properties", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestMergerPolicyModel", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestMergerPolicyModel", "type": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "TestBaseModel"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestMergerPolicyModel.test_valid_setup_default_values", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestMergerPolicyModel.test_valid_setup_default_values", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestLaissezFaireMergerPolicyModel", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestLaissezFaireMergerPolicyModel", "type": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestLaissezFaireMergerPolicyModel.test_not_profitable_below_assets_threshold_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestLaissezFaireMergerPolicyModel.test_not_profitable_below_assets_threshold_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestLaissezFaireMergerPolicyModel.test_not_profitable_above_assets_threshold_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestLaissezFaireMergerPolicyModel.test_not_profitable_above_assets_threshold_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestLaissezFaireMergerPolicyModel.test_not_profitable_above_assets_threshold_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestLaissezFaireMergerPolicyModel.test_not_profitable_above_assets_threshold_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestLaissezFaireMergerPolicyModel.test_not_profitable_below_assets_threshold_not_credit_rationed_unsuccessful", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestLaissezFaireMergerPolicyModel.test_not_profitable_below_assets_threshold_not_credit_rationed_unsuccessful", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestLaissezFaireMergerPolicyModel.test_profitable_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestLaissezFaireMergerPolicyModel.test_profitable_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestLaissezFaireMergerPolicyModel.test_profitable_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestLaissezFaireMergerPolicyModel.test_profitable_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestLaissezFaireMergerPolicyModel.test_profitable_not_credit_rationed_unsuccessful", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestLaissezFaireMergerPolicyModel.test_profitable_not_credit_rationed_unsuccessful", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestIntermediateLateTakeoverAllowedMergerPolicyModel", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestIntermediateLateTakeoverAllowedMergerPolicyModel", "type": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestIntermediateLateTakeoverAllowedMergerPolicyModel.test_not_profitable_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestIntermediateLateTakeoverAllowedMergerPolicyModel.test_not_profitable_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestIntermediateLateTakeoverAllowedMergerPolicyModel.test_not_profitable_not_credit_rationed_unsuccessful", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestIntermediateLateTakeoverAllowedMergerPolicyModel.test_not_profitable_not_credit_rationed_unsuccessful", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestIntermediateLateTakeoverAllowedMergerPolicyModel.test_not_profitable_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestIntermediateLateTakeoverAllowedMergerPolicyModel.test_not_profitable_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestIntermediateLateTakeoverAllowedMergerPolicyModel.test_profitable_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestIntermediateLateTakeoverAllowedMergerPolicyModel.test_profitable_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestIntermediateLateTakeoverAllowedMergerPolicyModel.test_profitable_not_credit_rationed_unsuccessful", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestIntermediateLateTakeoverAllowedMergerPolicyModel.test_profitable_not_credit_rationed_unsuccessful", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestIntermediateLateTakeoverAllowedMergerPolicyModel.test_profitable_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestIntermediateLateTakeoverAllowedMergerPolicyModel.test_profitable_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestIntermediateLateTakeoverProhibitedMergerPolicyModel", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestIntermediateLateTakeoverProhibitedMergerPolicyModel", "type": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestIntermediateLateTakeoverProhibitedMergerPolicyModel.test_not_profitable_below_assets_threshold_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestIntermediateLateTakeoverProhibitedMergerPolicyModel.test_not_profitable_below_assets_threshold_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestIntermediateLateTakeoverProhibitedMergerPolicyModel.test_not_profitable_above_assets_threshold_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestIntermediateLateTakeoverProhibitedMergerPolicyModel.test_not_profitable_above_assets_threshold_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestIntermediateLateTakeoverProhibitedMergerPolicyModel.test_profitable_below_assets_threshold_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestIntermediateLateTakeoverProhibitedMergerPolicyModel.test_profitable_below_assets_threshold_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestIntermediateLateTakeoverProhibitedMergerPolicyModel.test_profitable_below_assets_threshold_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestIntermediateLateTakeoverProhibitedMergerPolicyModel.test_profitable_below_assets_threshold_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestIntermediateLateTakeoverProhibitedMergerPolicyModel.test_profitable_above_assets_threshold_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestIntermediateLateTakeoverProhibitedMergerPolicyModel.test_profitable_above_assets_threshold_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestIntermediateLateTakeoverProhibitedMergerPolicyModel.test_profitable_above_assets_threshold_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestIntermediateLateTakeoverProhibitedMergerPolicyModel.test_profitable_above_assets_threshold_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestStrictMergerPolicyModel", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestStrictMergerPolicyModel", "type": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestStrictMergerPolicyModel.test_not_profitable_not_credit_rationed_summary", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestStrictMergerPolicyModel.test_not_profitable_not_credit_rationed_summary", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestStrictMergerPolicyModel.test_not_profitable_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestStrictMergerPolicyModel.test_not_profitable_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestStrictMergerPolicyModel.test_not_profitable_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestStrictMergerPolicyModel.test_not_profitable_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestStrictMergerPolicyModel.test_profitable_below_assets_threshold_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestStrictMergerPolicyModel.test_profitable_below_assets_threshold_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestStrictMergerPolicyModel.test_profitable_below_assets_threshold_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestStrictMergerPolicyModel.test_profitable_below_assets_threshold_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestStrictMergerPolicyModel.test_profitable_above_assets_threshold_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestStrictMergerPolicyModel.test_profitable_above_assets_threshold_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestStrictMergerPolicyModel.test_profitable_above_assets_threshold_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestStrictMergerPolicyModel.test_profitable_above_assets_threshold_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestOptimalMergerPolicyModel", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestOptimalMergerPolicyModel", "type": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "TestMergerPolicyModel"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestOptimalMergerPolicyModel.test_strict_beneficial_compared_to_laissez_faire", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestOptimalMergerPolicyModel.test_strict_beneficial_compared_to_laissez_faire", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestOptimalMergerPolicyModel.test_strict_not_beneficial_compared_to_laissez_faire", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestOptimalMergerPolicyModel.test_strict_not_beneficial_compared_to_laissez_faire", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestOptimalMergerPolicyModel.test_strict_beneficial_compared_to_intermediate", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestOptimalMergerPolicyModel.test_strict_beneficial_compared_to_intermediate", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestOptimalMergerPolicyModel.test_strict_not_beneficial_compared_to_intermediate", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestOptimalMergerPolicyModel.test_strict_not_beneficial_compared_to_intermediate", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestOptimalMergerPolicyModel.test_strict_optimal_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestOptimalMergerPolicyModel.test_strict_optimal_merger_policy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestOptimalMergerPolicyModel.test_intermediate_optimal_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestOptimalMergerPolicyModel.test_intermediate_optimal_merger_policy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model.TestOptimalMergerPolicyModel.test_laissez_faire_optimal_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.tests.Test_Model", "qualname": "TestOptimalMergerPolicyModel.test_laissez_faire_optimal_merger_policy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();