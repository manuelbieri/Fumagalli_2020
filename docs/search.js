window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "Fumagalli_Motta_Tarantino_2020", "modulename": "Fumagalli_Motta_Tarantino_2020", "type": "module", "doc": "<p><a href=\"https://github.com/manuelbieri/Fumagalli_2020/actions/workflows/CodeCov.yml\"><img src=\"https://github.com/manuelbieri/Fumagalli_2020/actions/workflows/CodeCov.yml/badge.svg\" alt=\"CI\" /></a>\n<a href=\"https://codecov.io/gh/manuelbieri/Fumagalli_2020\"><img src=\"https://codecov.io/gh/manuelbieri/Fumagalli_2020/branch/master/graph/badge.svg?token=RRZ3PJI9U1\" alt=\"codecov\" /></a>\n<a href=\"https://github.com/manuelbieri/Fumagalli_2020/actions/workflows/codeql-analysis.yml\"><img src=\"https://github.com/manuelbieri/Fumagalli_2020/actions/workflows/codeql-analysis.yml/badge.svg\" alt=\"CodeQL\" /></a>\n<a href=\"https://github.com/manuelbieri/Fumagalli_2020/actions/workflows/Black.yml\"><img src=\"https://github.com/manuelbieri/Fumagalli_2020/actions/workflows/Black.yml/badge.svg\" alt=\"Code Style Check\" /></a>\n<a href=\"https://www.codefactor.io/repository/github/manuelbieri/fumagalli_2020\"><img src=\"https://www.codefactor.io/repository/github/manuelbieri/fumagalli_2020/badge\" alt=\"CodeFactor\" /></a>\n<a href=\"https://github.com/manuelbieri/Fumagalli_2020\"><img src=\"https://img.shields.io/github/repo-size/manuelbieri/Fumagalli_2020\" alt=\"GitHub repo size\" /></a>\n<a href=\"https://github.com/manuelbieri/Fumagalli_2020/blob/master/LICENSE\"><img src=\"https://img.shields.io/github/license/manuelbieri/Fumagalli_2020\" alt=\"GitHub license\" /></a>\n<a href=\"https://github.com/manuelbieri/Fumagalli_2020/releases\"><img src=\"https://img.shields.io/github/v/release/manuelbieri/Fumagalli_2020\" alt=\"GitHub release (latest by date)\" /></a>\n<img src=\"https://img.shields.io/pypi/status/Fumagalli-Motta-Tarantino-2020\" alt=\"PyPI - Status\" />\n<img src=\"https://img.shields.io/pypi/pyversions/Fumagalli-Motta-Tarantino-2020\" alt=\"PyPI - Python Version\" />\n<a href=\"https://share.streamlit.io/manuelbieri/fmt20web/fmt20_app.py\"><img src=\"https://static.streamlit.io/badges/streamlit_badge_black_white.svg\" alt=\"Streamlit App\" /></a></p>\n\n<h3 id=\"installation\">Installation</h3>\n\n<p>Install the latest release from <a href=\"https://pypi.org/project/Fumagalli-Motta-Tarantino-2020/\">PyPi</a>:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>$ pip install Fumagalli-Motta-Tarantino-2020\n</code></pre></div>\n\n<p>Or alternatively, install this package directly from source:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>$ pip install git+https://github.com/manuelbieri/Fumagalli_2020.git\n</code></pre></div>\n\n<h3 id=\"basic-usage\">Basic Usage</h3>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">Fumagalli_Motta_Tarantino_2020</span> <span class=\"k\">as</span> <span class=\"nn\">FMT20</span>\n\n<span class=\"c1\"># initialize the model (here you can adjust the parameters of the model)</span>\n<span class=\"c1\"># all other models conform to the interface defined in FMT20.OptimalMergerPolicy</span>\n<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">FMT20</span><span class=\"o\">.</span><span class=\"n\">OptimalMergerPolicy</span> <span class=\"o\">=</span> <span class=\"n\">FMT20</span><span class=\"o\">.</span><span class=\"n\">OptimalMergerPolicy</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># print a summary of the outcome</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">summary</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># plot a model overview</span>\n<span class=\"n\">FMT20</span><span class=\"o\">.</span><span class=\"n\">Overview</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># open API-documentation</span>\n<span class=\"n\">FMT20</span><span class=\"o\">.</span><span class=\"n\">docs</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># open GitHub-repository</span>\n<span class=\"n\">FMT20</span><span class=\"o\">.</span><span class=\"n\">repo</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<p>A tutorial is included with the notebook Tutorial.ipynb. Additionally, find the latest documentation including all the details on <a href=\"https://manuelbieri.ch/Fumagalli_2020/\">manuelbieri.ch/fumagalli_2020</a>.</p>\n\n<p>Note: mybinder.org is currently not supported, since this package needs at least python 3.9.</p>\n\n<h3 id=\"dependencies\">Dependencies</h3>\n\n<p>Install the dependencies with the following command (Note: Make sure you are operating in the same directory, where the \n<code>requirements.txt</code> is located.):</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>$ pip install -r requirements.txt\n</code></pre></div>\n\n<h3 id=\"tests\">Tests</h3>\n\n<p>Run the unittests shipped in Fumagalli_Motta_Tarantino_2020.Tests with the following command (pay attention to the current working directory):</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>$ python -m unittest discover Fumagalli_Motta_Tarantino_2020/Tests\n</code></pre></div>\n\n<p>For explanations about the tests, have a look at Fumagalli_Motta_Tarantino_2020.Tests. See <a href=\"https://app.codecov.io/gh/manuelbieri/Fumagalli_2020\">codecov.io</a> for a detailed report about the test coverage.</p>\n\n<h3 id=\"generate-documentation\">Generate Documentation</h3>\n\n<p>Generate the documentation with the following command:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>$ pdoc -o docs Fumagalli_Motta_Tarantino_2020 --docformat numpy --math\n</code></pre></div>\n\n<p>or run the shell-script <code>docs/build.sh</code> in the terminal.</p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.docs", "modulename": "Fumagalli_Motta_Tarantino_2020", "qualname": "docs", "type": "function", "doc": "<p>Opens the API documentation in the browser.</p>\n", "signature": "() -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.repo", "modulename": "Fumagalli_Motta_Tarantino_2020", "qualname": "repo", "type": "function", "doc": "<p>Opens the Git - repository in the browser.</p>\n", "signature": "() -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Configurations", "modulename": "Fumagalli_Motta_Tarantino_2020.Configurations", "type": "module", "doc": "<h1 id=\"configurations\">Configurations</h1>\n\n<p>To make the life of the user easier, here are some predefined configuration of parameters with specific characteristics.</p>\n\n<h2 id=\"how-to-use\">How to use</h2>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">Fumagalli_Motta_Tarantino_2020</span> <span class=\"k\">as</span> <span class=\"nn\">FMT20</span>\n\n<span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">FMT20</span><span class=\"o\">.</span><span class=\"n\">LoadParameters</span><span class=\"p\">(</span><span class=\"n\">config_id</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"c1\"># load configuration</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">FMT20</span><span class=\"o\">.</span><span class=\"n\">OptimalMergerPolicy</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">())</span> <span class=\"c1\"># Do not forget the stars in front of the call</span>\n\n<span class=\"c1\"># Advanced use</span>\n<span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">FMT20</span><span class=\"o\">.</span><span class=\"n\">LoadParameters</span><span class=\"p\">(</span><span class=\"n\">config_id</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">adjust_parameters</span><span class=\"p\">(</span><span class=\"n\">development_costs</span><span class=\"o\">=</span><span class=\"mf\">0.11</span><span class=\"p\">)</span> <span class=\"c1\"># change parameters in the configuration</span>\n<span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">set_merger_policy</span><span class=\"p\">(</span><span class=\"n\">FMT20</span><span class=\"o\">.</span><span class=\"n\">MergerPolicies</span><span class=\"o\">.</span><span class=\"n\">Laissez_faire</span><span class=\"p\">)</span> <span class=\"c1\"># change merger policy</span>\n<span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">toggle_development_success</span><span class=\"p\">()</span> <span class=\"c1\"># change the development outcome to the opposite</span>\n<span class=\"n\">model_with_adjustments</span> <span class=\"o\">=</span> <span class=\"n\">FMT20</span><span class=\"o\">.</span><span class=\"n\">OptimalMergerPolicy</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">())</span>\n</code></pre></div>\n\n<p>Change the <code>config_id</code> argument for a different configuration of parameters.</p>\n\n<h2 id=\"available-configurations\">Available Configurations</h2>\n\n<p>See Fumagalli_Motta_Tarantino_2020.Models.BaseModel for the definition of the thresholds.</p>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:center;\">ID</th>\n  <th style=\"text-align:center;\">Shelving</th>\n  <th style=\"text-align:center;\">$F(\\bar{A}) &gt; \\Gamma(\\cdot)$</th>\n  <th style=\"text-align:center;\">$F(\\bar{A}) &gt; \\Phi(\\cdot)$</th>\n  <th style=\"text-align:center;\">$F(\\bar{A}) &gt; \\Phi'(\\cdot)$</th>\n  <th style=\"text-align:center;\">$F(\\bar{A}^T) &gt; \\Phi^T(\\cdot)$</th>\n  <th style=\"text-align:left;\">Optimized for</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:center;\">1</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:left;\">OptimalMerger</td>\n</tr>\n<tr>\n  <td style=\"text-align:center;\">2</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:left;\">OptimalMerger</td>\n</tr>\n<tr>\n  <td style=\"text-align:center;\">3</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:left;\">OptimalMerger</td>\n</tr>\n<tr>\n  <td style=\"text-align:center;\">4</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:left;\">OptimalMerger</td>\n</tr>\n<tr>\n  <td style=\"text-align:center;\">5</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:left;\">OptimalMerger</td>\n</tr>\n<tr>\n  <td style=\"text-align:center;\">30</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:left;\">ProCompetitive</td>\n</tr>\n<tr>\n  <td style=\"text-align:center;\">31</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:left;\">ProCompetitive</td>\n</tr>\n<tr>\n  <td style=\"text-align:center;\">32</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:left;\">ProCompetitive</td>\n</tr>\n<tr>\n  <td style=\"text-align:center;\">40</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:left;\">ResourceWaste</td>\n</tr>\n<tr>\n  <td style=\"text-align:center;\">41</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:left;\">ResourceWaste</td>\n</tr>\n<tr>\n  <td style=\"text-align:center;\">42</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:left;\">ResourceWaste</td>\n</tr>\n</tbody>\n</table>\n\n<p>Further ranges of configurations are:</p>\n\n<ul>\n<li>1-5: Standard configurations for Fumagalli_Motta_Tarantino_2020.Models.OptimalMergerPolicy</li>\n<li>10-19: Configurations for Fumagalli_Motta_Tarantino_2020.Models.OptimalMergerPolicy used in Figures.ipynb</li>\n<li>30-39: Configurations for Fumagalli_Motta_Tarantino_2020.ExtensionModels.ProCompetitive used in Figures.ipynb and tests </li>\n<li>40-49: Configurations for Fumagalli_Motta_Tarantino_2020.ExtensionModels.ResourceWaste used in Figures.ipynb and tests</li>\n<li>50-59: Configurations for Fumagalli_Motta_Tarantino_2020.AdditionalModels.PerfectInformation used in Figures.ipynb and tests</li>\n</ul>\n\n<p>Find the full set of configurations and their visualization in Notebooks/Configurations.ipynb.</p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Configurations.ConfigExceptions", "modulename": "Fumagalli_Motta_Tarantino_2020.Configurations.ConfigExceptions", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Configurations.ConfigExceptions.IDNotAvailableError", "modulename": "Fumagalli_Motta_Tarantino_2020.Configurations.ConfigExceptions", "qualname": "IDNotAvailableError", "type": "class", "doc": "<p>Raised if a given ID does not exist in the preset configurations.</p>\n", "bases": "builtins.NotImplementedError"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Configurations.LoadConfig", "modulename": "Fumagalli_Motta_Tarantino_2020.Configurations.LoadConfig", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Configurations.LoadConfig.LoadParameters", "modulename": "Fumagalli_Motta_Tarantino_2020.Configurations.LoadConfig", "qualname": "LoadParameters", "type": "class", "doc": "<p>Loads a specfic configuration from a file.</p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Configurations.LoadConfig.LoadParameters.__init__", "modulename": "Fumagalli_Motta_Tarantino_2020.Configurations.LoadConfig", "qualname": "LoadParameters.__init__", "type": "function", "doc": "<p>Initializes a valid object with a valid path to the configuration file and a valid id for the configuration.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>config_id</strong> (int):\nID of the configuration (Fumagalli_Motta_Tarantino_2020.Configurations)</li>\n<li><strong>file_path</strong> (str):\nPath to configuration file, if not set, then the standard file is used.</li>\n</ul>\n", "signature": "(self, config_id: int, file_path: Optional[str] = None)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Configurations.LoadConfig.LoadParameters.file_name", "modulename": "Fumagalli_Motta_Tarantino_2020.Configurations.LoadConfig", "qualname": "LoadParameters.file_name", "type": "variable", "doc": "<p>Filename of the configuration file.</p>\n", "annotation": ": str", "default_value": " = 'params.csv'"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Configurations.LoadConfig.LoadParameters.adjust_parameters", "modulename": "Fumagalli_Motta_Tarantino_2020.Configurations.LoadConfig", "qualname": "LoadParameters.adjust_parameters", "type": "function", "doc": "<p>Change parameter values of the configuration.</p>\n\n<p>You can change as many values as you wish with one call.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>**kwargs</strong>: Form: {\"name_of_parameter\": new_value_of_parameter, ...}</li>\n</ul>\n", "signature": "(self, **kwargs) -> None", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Configurations.LoadConfig.LoadParameters.toggle_development_success", "modulename": "Fumagalli_Motta_Tarantino_2020.Configurations.LoadConfig", "qualname": "LoadParameters.toggle_development_success", "type": "function", "doc": "<p>Changes the value of the development success (if attempted) to the exact opposite.</p>\n\n<ul>\n<li>False $\\Rightarrow$ True</li>\n<li>True $\\Rightarrow$ False</li>\n</ul>\n", "signature": "(self) -> None", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Configurations.LoadConfig.LoadParameters.set_startup_assets", "modulename": "Fumagalli_Motta_Tarantino_2020.Configurations.LoadConfig", "qualname": "LoadParameters.set_startup_assets", "type": "function", "doc": "<p>Sets the value of the start-up assets.</p>\n", "signature": "(self, value: float)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Configurations.LoadConfig.LoadParameters.set_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Configurations.LoadConfig", "qualname": "LoadParameters.set_merger_policy", "type": "function", "doc": "<p>Sets the merger policy.</p>\n", "signature": "(\n    self,\n    value: Fumagalli_Motta_Tarantino_2020.Models.Types.MergerPolicies\n)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models", "modulename": "Fumagalli_Motta_Tarantino_2020.Models", "type": "module", "doc": "<p>This submodule provides the implementations of the models presented in Fumagalli et al. (2020) as well as extension of \nthese models by Manuel Bieri.</p>\n\n<h2 id=\"basic-usage\">Basic Usage</h2>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">Fumagalli_Motta_Tarantino_2020</span> <span class=\"k\">as</span> <span class=\"nn\">FMT20</span>\n\n<span class=\"c1\"># see list below for the available models</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">FMT20</span><span class=\"o\">.</span><span class=\"n\">OptimalMergerPolicy</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># print summary</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get summary as dict</span>\n<span class=\"n\">summary</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">summary</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># check whether a killer acquisition occurred</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">is_killer_acquisition</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># get the optimal merger policy</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">get_optimal_merger_policy</span><span class=\"p\">())</span>\n</code></pre></div>\n\n<h2 id=\"available-models\">Available Models</h2>\n\n<p>The following models are available:</p>\n\n<ul>\n<li>Fumagalli_Motta_Tarantino_2020.Models.Base.CoreModel\n<ul>\n<li>Validates input parameters according to section 2 of Fumagalli et al. (2020)</li>\n<li>Use always Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy instead</li>\n</ul></li>\n<li>Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy ($\\Rightarrow$ inherits from Base.CoreModel)\n<ul>\n<li>Implements the logic of merger policies presented in sections 3-5 of Fumagalli et al. (2020)</li>\n<li>Use always Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy instead</li>\n</ul></li>\n<li>Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy ($\\Rightarrow$ inherits from Base.MergerPolicy)\n<ul>\n<li>Implements the logic of optimal merger policies presented in section 6 of Fumagalli et al. (2020)</li>\n<li>Used as standard model, since it implements all the logic from the basic model</li>\n</ul></li>\n<li>Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.CournotCompetition ($\\Rightarrow$ inherits from Base.OptimalMergerPolicy)\n<ul>\n<li>Implements the logic of the model presented in section 7 of Fumagalli et al. (2020)</li>\n</ul></li>\n<li>Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.EquityContract ($\\Rightarrow$ inherits from Base.OptimalMergerPolicy)\n<ul>\n<li>Implements the logic of the model presented in section 8.4 of Fumagalli et al. (2020)</li>\n</ul></li>\n<li>Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.PerfectInformation ($\\Rightarrow$ inherits from Base.OptimalMergerPolicy)\n<ul>\n<li>Implements the logic of the model presented in section 8.5 of Fumagalli et al. (2020)</li>\n</ul></li>\n<li>Fumagalli_Motta_Tarantino_2020.Models.Extension.ProCompetitive ($\\Rightarrow$ inherits from Base.OptimalMergerPolicy)\n<ul>\n<li>Implements the logic of the model presented in section A.3 of \"Extension of Fumagalli et al (2020).pdf\"</li>\n</ul></li>\n<li>Fumagalli_Motta_Tarantino_2020.Models.Extension.ResourceWaste ($\\Rightarrow$ inherits from Extension.ProCompetitive)\n<ul>\n<li>Implements the logic of the model presented in section A.4 of \"Extension of Fumagalli et al (2020).pdf\"</li>\n</ul></li>\n</ul>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.CoreModel", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "CoreModel", "type": "class", "doc": "<p>There are three players in our game: an Antitrust Authority (AA), which at the beginning of the game decides its\nmerger policy; a monopolist $       {I}$ncumbent; and a $   {S}$tart-up. The start-up owns a \u201cprototype\u201d (or project)\nthat, if developed, can give rise to an innovation: for instance a substitute/higher quality product to the\nincumbent\u2019s existing product, or a more efficient production process. The start-up does not have enough own\nresources to develop the project. It has two options: it can either obtain additional funds from competitive\ncapital markets, or sell out to the incumbent. The incumbent will have to decide whether and when it wants to\nacquire the start-up (and if it does so before product development, it has to decide whether to develop the\nprototype or shelve it), conditional on the AA\u2019s approval of the acquisition. We assume that the takeover\ninvolves a negligible but positive transaction cost. The AA commits at the beginning of the game to a merger\npolicy, in the form of a maximum threshold of \u201charm\u201d, that it is ready to tolerate. Harm from a proposed merger\nconsists of the difference between the expected welfare levels if the merger goes ahead, and in the counterfactual\nwhere it does not take place (derived of course by correctly anticipating the continuation equilibrium of the\ngame). A proposed merger will be prohibited only if the tolerated harm level H is lower than the expected harm\nfrom the merger, if any.</p>\n\n<p>Timing of the game:</p>\n\n<table>\n<thead>\n<tr>\n  <th>Time</th>\n  <th>Action</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>0</td>\n  <td>The AA commits to the standard for merger approval, $\\bar{H}$.</td>\n</tr>\n<tr>\n  <td>1(a)</td>\n  <td>$  {I}$ can make a takeover offer to $     {S}$, which can accept or reject.</td>\n</tr>\n<tr>\n  <td>1(b)</td>\n  <td>The AA approves or blocks the takeover proposal.</td>\n</tr>\n<tr>\n  <td>1(c)</td>\n  <td>The firm ($        {I}$ or $       {S}$) that owns the prototype decides whether to develop or shelve it.</td>\n</tr>\n<tr>\n  <td>1(d)</td>\n  <td>The owner of the prototype engages in financial contracting (if needed). After that, uncertainty about the success or failure of the project resolves.</td>\n</tr>\n<tr>\n  <td>2(a)</td>\n  <td>$  {I}$ can make a take-it-or-leave-it offer to $  {S}$ (if it did not already buy it at t = 1, and if the development of the project was successful).</td>\n</tr>\n<tr>\n  <td>2(b)</td>\n  <td>The AA approves or blocks the takeover proposal.</td>\n</tr>\n<tr>\n  <td>3</td>\n  <td>Active firms sell in the product market, payoffs are realised and contracts are honored.</td>\n</tr>\n</tbody>\n</table>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.CoreModel.__init__", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "CoreModel.__init__", "type": "function", "doc": "<p>Initializes a valid base model according to the assumptions given in the paper.</p>\n\n<p>The following assumptions have to be met:</p>\n\n<table>\n<thead>\n<tr>\n  <th>Condition</th>\n  <th>Remark</th>\n  <th>Page (Assumption)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>$\\bar{H} \\ge 0$</td>\n  <td>The tolerated level of harm has to be bigger than 0.</td>\n  <td>p.6</td>\n</tr>\n<tr>\n  <td>$p \\in (0,1]$</td>\n  <td>Probability that the prototype is developed successfully depends on the non-contractible effort exerted by the entrepreneur of the firm that owns the project. In case of no effort the project fails for sure, but the entrepreneur obtains a positive private benefit. In case of failure the project yields no profit.</td>\n  <td>p.8</td>\n</tr>\n<tr>\n  <td>$B>0$</td>\n  <td>Private benefit of the entrepreneur in case of failure.</td>\n  <td>p.8</td>\n</tr>\n<tr>\n  <td>$A \\in (0,K)$</td>\n  <td>The startup does not hold sufficient assets at the beginning to cover the costs.</td>\n  <td>p.8</td>\n</tr>\n<tr>\n  <td>$\\pi^m_I>\\pi^d_I$</td>\n  <td>Profit of the incumbent has to be bigger without the innovation than in the duopoly.</td>\n  <td>p.7</td>\n</tr>\n<tr>\n  <td>$\\pi^M_I>\\pi^m_I$</td>\n  <td>Industry profits are higher with a multi-product monopolist than a single product monopolist (otherwise, the incumbent would always shelve).</td>\n  <td>p.7</td>\n</tr>\n<tr>\n  <td>$CS^M \\ge CS^m$</td>\n  <td>Consumer surplus with the innovation has to weakly bigger than without the innovation (consumers like variety).</td>\n  <td>p.7</td>\n</tr>\n<tr>\n  <td>$\\pi^M_I>\\pi^d_I+\\pi^d_S$</td>\n  <td>Industry profits are higher under monopoly than under duopoly. If this assumption did not hold, the takeover would not take place.</td>\n  <td>p.7 (A1)</td>\n</tr>\n<tr>\n  <td>$\\pi^d_S>\\pi^M_I-\\pi^m_I$</td>\n  <td>An incumbent has less incentive to innovate (in a new/better product or a more efficient production process) than a potential entrant because the innovation would cannibalise the incumbent\u2019s current profits. (Corresponds to Arrow's replacement effect)</td>\n  <td>p.7 (A2)</td>\n</tr>\n<tr>\n  <td>$p\\pi^d_S>K$</td>\n  <td>In case of effort it is efficient to develop the prototype, i.e., development has a positive net present value (NPV) for the start-up</td>\n  <td>p.8 (A3)</td>\n</tr>\n<tr>\n  <td>$p(W^M-W^m)&gt;K$</td>\n  <td>The development of the project is not only privately beneficial for the start-up, but also for society as a whole, whether undertaken by the incumbent or the start-up (implies $\\;p(W^d-W^m)&gt;K\\;$).</td>\n  <td>p.8 (A4)</td>\n</tr>\n<tr>\n  <td>$B-K&lt;0$$B-(p\\pi^d_S-K)&gt;0$</td>\n  <td>The first inequality implies that if S shirks the project has negative value; thus, no financial contract could be signed unless the startup makes effort. The second implies that the start-up may be financially constrained, that is, it may hold insufficient assets to fund the development of the prototype even though the project has a positive NPV.</td>\n  <td>p.8 (A5)</td>\n</tr>\n</tbody>\n</table>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>development_costs</strong> (float):\n($K$) Fixed costs to invest for development.</li>\n<li><strong>startup_assets</strong> (float):\n($A$) Assets of the startup at the beginning.</li>\n<li><strong>success_probability</strong> (float):\n($p$) Probability of success in case of effort (otherwise the projects fails for sure).</li>\n<li><strong>development_success</strong> (bool):\nDecides whether an attempted development will be successful (true $\\rightarrow$ attempted development succeeds).</li>\n<li><strong>private_benefit</strong> (float):\n($B$) Private benefit of the entrepreneur in case of failure.</li>\n<li><strong>consumer_surplus_without_innovation</strong> (float):\n($CS^m$) Consumer surplus for the case that the innovation is not introduced by the incumbent into the market.</li>\n<li><strong>incumbent_profit_without_innovation</strong> (float):\n($\\pi^m_I$) Profit of the monopolist with a single product (without innovation).</li>\n<li><strong>consumer_surplus_duopoly</strong> (float):\n($CS^d$) Consumer surplus for the case that the innovation is introduced into the market and a duopoly exists.</li>\n<li><strong>incumbent_profit_duopoly</strong> (float):\n($\\pi^d_I$) Profit of the incumbent in the case of a duopoly.</li>\n<li><strong>startup_profit_duopoly</strong> (float):\n($\\pi^d_S$) Profit of the startup in the case of a duopoly.</li>\n<li><strong>consumer_surplus_with_innovation</strong> (float):\n($CS^M$) Consumer surplus for the case that the innovation is introduced by the incumbent into the market.</li>\n<li><strong>incumbent_profit_with_innovation</strong> (float):\n($\\pi^M_I$) Profit of the monopolist with multiple products (with innovation).</li>\n</ul>\n", "signature": "(\n    self,\n    merger_policy: Fumagalli_Motta_Tarantino_2020.Models.Types.MergerPolicies = <MergerPolicies.Strict: 'Strict'>,\n    development_costs: float = 0.1,\n    startup_assets: float = 0.05,\n    success_probability: float = 0.7,\n    development_success: bool = True,\n    private_benefit: float = 0.05,\n    consumer_surplus_without_innovation: float = 0.2,\n    incumbent_profit_without_innovation: float = 0.4,\n    consumer_surplus_duopoly: float = 0.5,\n    incumbent_profit_duopoly: float = 0.2,\n    startup_profit_duopoly: float = 0.2,\n    consumer_surplus_with_innovation: float = 0.3,\n    incumbent_profit_with_innovation: float = 0.5,\n    asset_distribution: Union[Fumagalli_Motta_Tarantino_2020.Models.Distributions.NormalDistribution, Fumagalli_Motta_Tarantino_2020.Models.Distributions.UniformDistribution] = <class 'Fumagalli_Motta_Tarantino_2020.Models.Distributions.NormalDistribution'>,\n    **kwargs\n)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.CoreModel.development_costs", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "CoreModel.development_costs", "type": "variable", "doc": "<p>($K$) Fixed costs to invest for development.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.CoreModel.startup_assets", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "CoreModel.startup_assets", "type": "variable", "doc": "<p>($A$) Assets of the startup at the beginning.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.CoreModel.success_probability", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "CoreModel.success_probability", "type": "variable", "doc": "<p>($p$) Probability of success in case of effort (otherwise the projects fails for sure).</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.CoreModel.development_success", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "CoreModel.development_success", "type": "variable", "doc": "<p>Decides whether an attempted development will be successful.</p>\n\n<p>If true, every attempted development will be successful.</p>\n", "annotation": ": bool"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.CoreModel.private_benefit", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "CoreModel.private_benefit", "type": "variable", "doc": "<p>($B$) Private benefit of the entrepreneur in case of failure.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.CoreModel.incumbent_profit_with_innovation", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "CoreModel.incumbent_profit_with_innovation", "type": "variable", "doc": "<p>($\\pi^M_I$) Profit of the monopolist with multiple products (with innovation).</p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.CoreModel.cs_with_innovation", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "CoreModel.cs_with_innovation", "type": "variable", "doc": "<p>($CS^M$) Consumer surplus for the case that the innovation is introduced by the incumbent into the market.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.CoreModel.w_with_innovation", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "CoreModel.w_with_innovation", "type": "variable", "doc": "<p>($W^M$) Total welfare for the case that the innovation is introduced by the incumbent into the market.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.CoreModel.incumbent_profit_without_innovation", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "CoreModel.incumbent_profit_without_innovation", "type": "variable", "doc": "<p>($\\pi^m_I$) Profit of the monopolist with a single product (without innovation).</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.CoreModel.cs_without_innovation", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "CoreModel.cs_without_innovation", "type": "variable", "doc": "<p>($CS^m$) Consumer surplus for the case that the innovation is not introduced by the incumbent into the market.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.CoreModel.w_without_innovation", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "CoreModel.w_without_innovation", "type": "variable", "doc": "<p>($W^m$) Total welfare for the case that the innovation is not introduced by the incumbent into the market.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.CoreModel.startup_profit_duopoly", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "CoreModel.startup_profit_duopoly", "type": "variable", "doc": "<p>($\\pi^d_S$) Profit of the startup in the case of a duopoly.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.CoreModel.incumbent_profit_duopoly", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "CoreModel.incumbent_profit_duopoly", "type": "variable", "doc": "<p>($\\pi^d_I$) Profit of the incumbent in the case of a duopoly.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.CoreModel.cs_duopoly", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "CoreModel.cs_duopoly", "type": "variable", "doc": "<p>($CS^d$) Consumer surplus for the case that the innovation is introduced into the market and a duopoly exists.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.CoreModel.w_duopoly", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "CoreModel.w_duopoly", "type": "variable", "doc": "<p>($W^d$) Total welfare for the case that the innovation is introduced into the market and a duopoly exists.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy", "type": "class", "doc": "<p>In this class all merger policies and their respective outcomes are calculated.</p>\n\n<p>The available merger policies are documented in Fumagalli_Motta_Tarantino_2020.Types.MergerPolicies.</p>\n", "bases": "CoreModel"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.__init__", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy.__init__", "type": "function", "doc": "<p>Takes the same arguments as BaseModel.__init__.</p>\n", "signature": "(self, *args, **kwargs)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy.merger_policy", "type": "variable", "doc": "<p>Returns the merger policy used to determine the outcome, given by the thresholds for tolerated harm.</p>\n\n<p>The levels of tolerated harm are defined in A.4 (p.36ff.). See Fumagalli_Motta_Tarantino_2020.Types.MergerPolicies\nfor the available merger policies.</p>\n", "annotation": ": Fumagalli_Motta_Tarantino_2020.Models.Types.MergerPolicies"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.tolerated_harm", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy.tolerated_harm", "type": "variable", "doc": "<p>($\\bar{H}$) The AA commits at the beginning of the game to a merger policy. The tolerated harm is the maximal loss of welfare the AA is ready to accept.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.asset_threshold", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy.asset_threshold", "type": "variable", "doc": "<p>Threshold level $\\bar{A} = B - (\\pi^d_S - K)$</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.asset_threshold_cdf", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy.asset_threshold_cdf", "type": "variable", "doc": "<p>Returns the value of the continuous distribution function for the asset threshold.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.asset_threshold_late_takeover", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy.asset_threshold_late_takeover", "type": "variable", "doc": "<p>The prospect that the start-up will be acquired at $t = 2$ alleviates financial constraints: there exists a\nthreshold level $\\bar{A}^T = B - (\\pi_I^M - K)$</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.asset_threshold_late_takeover_cdf", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy.asset_threshold_late_takeover_cdf", "type": "variable", "doc": "<p>Returns the value of the continuous distribution function for the asset threshold under laissez-faire.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.startup_assets", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy.startup_assets", "type": "variable", "doc": "<p>($A$) Assets of the startup at the beginning.</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.early_bidding_type", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy.early_bidding_type", "type": "variable", "doc": "<p>Returns the bidding attempt of the incumbent at $t = 1$.</p>\n\n<p>See Fumagalli_Motta_Tarantino_2020.Types.Takeover for the available options.</p>\n", "annotation": ": Fumagalli_Motta_Tarantino_2020.Models.Types.Takeover"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.late_bidding_type", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy.late_bidding_type", "type": "variable", "doc": "<p>Returns the bidding attempt of the incumbent at $t = 2$.</p>\n\n<p>See Fumagalli_Motta_Tarantino_2020.Types.Takeover for the available options.</p>\n", "annotation": ": Fumagalli_Motta_Tarantino_2020.Models.Types.Takeover"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.is_early_takeover", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy.is_early_takeover", "type": "variable", "doc": "<p>Returns whether the start-up is acquired by the incumbent at $t=1$.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If the start-up is acquired by the incumbent at $t=1$.</li>\n</ul>\n", "annotation": ": bool"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.is_late_takeover", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy.is_late_takeover", "type": "variable", "doc": "<p>Returns whether the start-up is acquired by the incumbent at $t=2$.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If the start-up is acquired by the incumbent at $t=2$.</li>\n</ul>\n", "annotation": ": bool"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.is_owner_investing", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy.is_owner_investing", "type": "variable", "doc": "<p>A start-up that expects external investors to deny financing will not undertake the investment. Conversely, the incumbent\nhas the financial ability to invest, but it does not always have the incentive to do so. Indeed, the innovation\nincreases the incumbent\u2019s profits less than the (unconstrained) start-up\u2019s. (This result follows directly from\nthe Arrow\u2019s replacement effect) The increase in the incumbent\u2019s profits may not be large enough to cover the investment\ncost. When this is the case, the incumbent will shelve the project and the acquisition turns out to be a killer acquisition.</p>\n\n<p>Investment decision under the strict merger policy:</p>\n\n<ul>\n<li>An unconstrained start-up always invests in the development of the prototype.</li>\n<li>The incumbent invests if (and only if): $p*(\\pi^M_I-\\pi^m_I) \\ge K$</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If the owner of the innovation at $t=1$ invests in the project, instead of shelving.</li>\n</ul>\n", "annotation": ": bool"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.is_development_successful", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy.is_development_successful", "type": "variable", "doc": "<p>Returns whether the development was successful or not.</p>\n\n<p>The following two conditions have to be satisfied:</p>\n\n<ul>\n<li>The owner of the product at $t=1$ has to invest in the development</li>\n<li>The development success variable has to be set to True (attempted development always successful).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If both conditions are met.</li>\n</ul>\n", "annotation": ": bool"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.is_startup_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy.is_startup_credit_rationed", "type": "variable", "doc": "<p>If no takeover took place at t = 1(b), a start-up that decided to develop the project searches for funding at $t = 1(d)$.</p>\n\n<p>Strict and Intermediate (late takeover prohibited):</p>\n\n<ul>\n<li>$A &lt; \\bar{A}$, the start-up is credit-rationed and cannot invest.</li>\n<li>$A \\ge \\bar{A}$, the start-up obtains external funding.</li>\n</ul>\n\n<p>Laissez-Faire and Intermediate (late takeover allowed):</p>\n\n<ul>\n<li>$A &lt; \\bar{A}^T$, the start-up is credit-rationed and cannot invest.</li>\n<li>$A \\ge \\bar{A}^T$, the start-up obtains external funding.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If the start-up is credit rationed.</li>\n</ul>\n", "annotation": ": bool"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.asset_distribution_threshold_welfare", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy.asset_distribution_threshold_welfare", "type": "variable", "doc": "<p>Threshold defined in Lemma 3 :$\\;\\Gamma(\\cdot)=\\frac{p(W^d-W^M)}{p(W^d-W^m)-K}$</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.asset_distribution_threshold_profitable_without_late_takeover", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy.asset_distribution_threshold_profitable_without_late_takeover", "type": "variable", "doc": "<p>Threshold defined in Condition 3 :$\\;\\Phi(\\cdot)=\\frac{p(\\pi^M_I-\\pi^d_I-\\pi^d_S)}{p(\\pi^M_I-\\pi^d_I)-K}$</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.asset_distribution_threshold_with_late_takeover", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy.asset_distribution_threshold_with_late_takeover", "type": "variable", "doc": "<p>Threshold defined in Condition 4 :$\\;\\Phi^T(\\cdot)=\\frac{p(\\pi^m_I-\\pi^M_I)+K}{p(\\pi^m_I+\\pi^d_S-\\pi^M_I)}$</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.asset_distribution_threshold_unprofitable_without_late_takeover", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy.asset_distribution_threshold_unprofitable_without_late_takeover", "type": "variable", "doc": "<p>Threshold defined in A-3 :$\\;\\Phi^{\\prime}(\\cdot)=\\frac{p(\\pi^m_I-\\pi^d_I-\\pi^d_S)+K}{p(\\pi^m_I+\\pi^d_I)}$</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.is_incumbent_expected_to_shelve", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy.is_incumbent_expected_to_shelve", "type": "function", "doc": "<p>Returns whether the incumbent is expected to shelve, whenever it acquires the entrant (Condition 1).</p>\n\n<ul>\n<li><p>True (expected to shelve): $p*(\\pi^M_I-\\pi^m_I) &lt; K$</p></li>\n<li><p>False (not expected to shelve): $p*(\\pi^M_I-\\pi^m_I) \\ge K$</p></li>\n</ul>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.incumbent_expected_additional_profit_from_innovation", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy.incumbent_expected_additional_profit_from_innovation", "type": "function", "doc": "<p>Returns the additional expected profit for the incumbent, if it does not shelve the product after an acquisition.</p>\n\n<p>$ Expected \\; additional \\; profit = p*(\\pi^M_I-\\pi^m_I)-K$</p>\n", "signature": "(self) -> float", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.summary", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy.summary", "type": "function", "doc": "<p>Returns the calculated outcome of the model with the defined parameters.</p>\n\n<p>The resulting dictionary contains the following information (and keys):</p>\n\n<ul>\n<li>'set_policy' : Fumagalli_Motta_Tarantino_2020.Types.MergerPolicies -> Defines the chosen merger policy based on the tolerated level of harm.</li>\n<li>'credit_rationed' : True, if the start-up is credit rationed.</li>\n<li>'early_bidding_type' : Fumagalli_Motta_Tarantino_2020.Types.Takeover -> Defines the bidding type of the incumbent at t=1.</li>\n<li>'late_bidding_type' : 'Fumagalli_Motta_Tarantino_2020.Types.Takeover -> Defines the bidding type of the incumbent at t=2.</li>\n<li>'development_attempt' : True, if the owner (start-up or incumbent after a takeover) tries to develop the product.</li>\n<li>'development_outcome' : True, if the product is developed successfully.</li>\n<li>'early_takeover' : True, if a takeover takes place at $t=1$.</li>\n<li>'late_takeover' : True, if a takeover takes place at $t=2$.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Fumagalli_Motta_Tarantino_2020.Types.Summary</strong>: Containing the result of the model with the defined parameters.</li>\n</ul>\n", "signature": "(self) -> Fumagalli_Motta_Tarantino_2020.Models.Types.Summary", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.is_killer_acquisition", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "MergerPolicy.is_killer_acquisition", "type": "function", "doc": "<p>Returns whether a killer acquisition occurred in the model.</p>\n\n<p>For a killer acquisition to take place the following condition have to satisfied:</p>\n\n<ul>\n<li>An early takeover takes place</li>\n<li>The incumbent does not develop the product</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: if a killer acquisition occurred in the model.</li>\n</ul>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "OptimalMergerPolicy", "type": "class", "doc": "<p>Add functionality to determine the optimal merger policy for a given set of parameters.</p>\n\n<p>Annotation: As discussed in section 5.1, a policy that is more lenient with respect to early acquisitions is always\ndominated by a strict merger policy. Therefore, only the three remaining policies are discussed.</p>\n", "bases": "MergerPolicy"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy.__init__", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "OptimalMergerPolicy.__init__", "type": "function", "doc": "<p>Takes the same arguments as BaseModel.__init__.</p>\n", "signature": "(self, *args, **kwargs)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy.get_optimal_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "OptimalMergerPolicy.get_optimal_merger_policy", "type": "function", "doc": "<p>A strict merger policy is always optimal when the incumbent is expected to invest. When the incumbent is expected\nto shelve, a more lenient policy (that either authorises any type of takeover, or that blocks early takeovers when\nthe incumbent makes a pooling bid and plans to shelve, and authorises late takeovers) may be optimal, but under the\ncumulative conditions indicated in proposition 4.</p>\n\n<p>See: OptimalMergerPolicy.is_laissez_faire_optimal, OptimalMergerPolicy.is_intermediate_optimal and OptimalMergerPolicy.is_strict_optimal</p>\n", "signature": "(self) -> Fumagalli_Motta_Tarantino_2020.Models.Types.MergerPolicies", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy.is_laissez_faire_optimal", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "OptimalMergerPolicy.is_laissez_faire_optimal", "type": "function", "doc": "<p>Returns whether a laissez-faire policy is optimal.</p>\n\n<p>A laissez-faire policy (that authorises any takeover) is optimal, if:</p>\n\n<ol>\n<li>Incumbent is expected to shelve ($p(\\pi^M_I-\\pi^m_I) &lt; K$).</li>\n<li>Financial imperfections are severe ($F(\\bar{A}^T)\\ge\\Phi^T(\\cdot)$).</li>\n<li>Approving early takeovers followed by shelving is optimal ($F(\\bar{A}^T)\\ge\\Lambda(\\cdot)$).</li>\n<li>Detrimental effect of less intense product market competition is dominated by the benefit of making it more\nlikely that the innovation is commercialised (Condition 6 not satisfied).</li>\n</ol>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If a laissez-faire merger policy is optimal.</li>\n</ul>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy.is_intermediate_optimal", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "OptimalMergerPolicy.is_intermediate_optimal", "type": "function", "doc": "<p>Returns whether an intermediate merger policy (late takeover allowed) is optimal.</p>\n\n<p>An intermediate merger policy (late takeovers allowed) is optimal, if:</p>\n\n<ol>\n<li>Incumbent is expected to shelve ($p(\\pi^M_I-\\pi^m_I) &lt; K$).</li>\n<li>Approving early takeovers followed by shelving is not optimal ($F(\\bar{A}^T) &lt; \\Lambda(\\cdot)$).</li>\n<li>Detrimental effect of less intense product market competition is dominated by the benefit of making it more\nlikely that the innovation is commercialised (Condition 6 not satisfied).</li>\n</ol>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If an intermediate merger policy (late takeover allowed) is optimal.</li>\n</ul>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy.is_strict_optimal", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "OptimalMergerPolicy.is_strict_optimal", "type": "function", "doc": "<p>Returns whether the strict merger policy is optimal.</p>\n\n<p>The strict merger is optimal, if the other policies are not optimal.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If the strict merger policy is optimal.</li>\n</ul>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy.is_competition_effect_dominating", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "OptimalMergerPolicy.is_competition_effect_dominating", "type": "function", "doc": "<p>Condition 6: $\\frac{p(W^d-W^m)-K}{p(W^M-W^m)-K} \\ge \\frac{1-F(\\bar{A}^T)}{1-F(\\bar{A})}$</p>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy.is_financial_imperfection_severe", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "OptimalMergerPolicy.is_financial_imperfection_severe", "type": "function", "doc": "<p>Returns whether financial imperfections are severe.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If the financial imperfections are severe.</li>\n</ul>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy.is_intermediate_policy_feasible", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "OptimalMergerPolicy.is_intermediate_policy_feasible", "type": "function", "doc": "<p>If the harm to welfare caused by an early takeover is lower than the one, caused by a late takeover, then also\nearly takeovers must be approved, even in the case of a pooling offer followed by shelving. Such a scenario occurs\nif (and only if): $F(\\bar{A}^T)\\ge\\Lambda(\\cdot)$</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If the above-mentioned condition is met.</li>\n</ul>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy.asset_distribution_threshold_shelving_approved", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "OptimalMergerPolicy.asset_distribution_threshold_shelving_approved", "type": "variable", "doc": "<p>Threshold defined in Condition 5 :$\\;\\Lambda(\\cdot)=\\frac{p(W^M-W^m)-K-(W^d-W^M)}{p(W^M-W^m)-K}$</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy.summary", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Base", "qualname": "OptimalMergerPolicy.summary", "type": "function", "doc": "<p>Returns the calculated outcome of the model with the defined parameters.</p>\n\n<p>Additional information compared to Fumagalli_Motta_Tarantino_2020.Models.MergerPolicy.summary:</p>\n\n<ul>\n<li>'optimal_policy' : Fumagalli_Motta_Tarantino_2020.Types.MergerPolicies -> Defines the welfare maximizing merger policy.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Fumagalli_Motta_Tarantino_2020.Types.OptimalMergerPolicySummary</strong>: Containing the result of the model with the defined parameters.</li>\n</ul>\n", "signature": "(\n    self\n) -> Fumagalli_Motta_Tarantino_2020.Models.Types.OptimalMergerPolicySummary", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.CournotCompetition", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended", "qualname": "CournotCompetition", "type": "class", "doc": "<p>Add functionality to determine the optimal merger policy for a given set of parameters.</p>\n\n<p>Annotation: As discussed in section 5.1, a policy that is more lenient with respect to early acquisitions is always\ndominated by a strict merger policy. Therefore, only the three remaining policies are discussed.</p>\n", "bases": "Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.CournotCompetition.__init__", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended", "qualname": "CournotCompetition.__init__", "type": "function", "doc": "<p>Takes the same arguments as BaseModel.__init__.</p>\n", "signature": "(self, gamma=0.3, *args, **kwargs)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.CournotCompetition.incumbent_expected_additional_profit_from_innovation", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended", "qualname": "CournotCompetition.incumbent_expected_additional_profit_from_innovation", "type": "function", "doc": "<p>Returns the additional expected profit for the incumbent, if it does not shelve the product after an acquisition.</p>\n\n<p>$ Expected \\; additional \\; profit = p*(\\pi^M_I-\\pi^m_I)-K$</p>\n", "signature": "(self) -> float", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.CournotCompetition.asset_threshold", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended", "qualname": "CournotCompetition.asset_threshold", "type": "variable", "doc": "<p>Threshold level $\\bar{A} = B - (\\pi^d_S - K)$</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.CournotCompetition.gamma", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended", "qualname": "CournotCompetition.gamma", "type": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.CournotCompetition.is_laissez_faire_optimal", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended", "qualname": "CournotCompetition.is_laissez_faire_optimal", "type": "function", "doc": "<p>Returns whether a laissez-faire policy is optimal.</p>\n\n<p>A laissez-faire policy (that authorises any takeover) is optimal, if:</p>\n\n<ol>\n<li>Incumbent is expected to shelve ($p(\\pi^M_I-\\pi^m_I) &lt; K$).</li>\n<li>Financial imperfections are severe ($F(\\bar{A}^T)\\ge\\Phi^T(\\cdot)$).</li>\n<li>Approving early takeovers followed by shelving is optimal ($F(\\bar{A}^T)\\ge\\Lambda(\\cdot)$).</li>\n<li>Detrimental effect of less intense product market competition is dominated by the benefit of making it more\nlikely that the innovation is commercialised (Condition 6 not satisfied).</li>\n</ol>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If a laissez-faire merger policy is optimal.</li>\n</ul>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.CournotCompetition.is_intermediate_optimal", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended", "qualname": "CournotCompetition.is_intermediate_optimal", "type": "function", "doc": "<p>Returns whether an intermediate merger policy (late takeover allowed) is optimal.</p>\n\n<p>An intermediate merger policy (late takeovers allowed) is optimal, if:</p>\n\n<ol>\n<li>Incumbent is expected to shelve ($p(\\pi^M_I-\\pi^m_I) &lt; K$).</li>\n<li>Approving early takeovers followed by shelving is not optimal ($F(\\bar{A}^T) &lt; \\Lambda(\\cdot)$).</li>\n<li>Detrimental effect of less intense product market competition is dominated by the benefit of making it more\nlikely that the innovation is commercialised (Condition 6 not satisfied).</li>\n</ol>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If an intermediate merger policy (late takeover allowed) is optimal.</li>\n</ul>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.CournotCompetition.is_strict_optimal", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended", "qualname": "CournotCompetition.is_strict_optimal", "type": "function", "doc": "<p>Returns whether the strict merger policy is optimal.</p>\n\n<p>The strict merger is optimal, if the other policies are not optimal.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If the strict merger policy is optimal.</li>\n</ul>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.CournotCompetition.is_investment_cost_sufficiently_high", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended", "qualname": "CournotCompetition.is_investment_cost_sufficiently_high", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.CournotCompetition.is_degree_substitutability_moderate", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended", "qualname": "CournotCompetition.is_degree_substitutability_moderate", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.PerfectInformation", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended", "qualname": "PerfectInformation", "type": "class", "doc": "<p>Add functionality to determine the optimal merger policy for a given set of parameters.</p>\n\n<p>Annotation: As discussed in section 5.1, a policy that is more lenient with respect to early acquisitions is always\ndominated by a strict merger policy. Therefore, only the three remaining policies are discussed.</p>\n", "bases": "Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.PerfectInformation.__init__", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended", "qualname": "PerfectInformation.__init__", "type": "function", "doc": "<p>Takes the same arguments as BaseModel.__init__.</p>\n", "signature": "(\n    self,\n    merger_policy: Fumagalli_Motta_Tarantino_2020.Models.Types.MergerPolicies = <MergerPolicies.Strict: 'Strict'>,\n    **kwargs\n)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.PerfectInformation.is_laissez_faire_optimal", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended", "qualname": "PerfectInformation.is_laissez_faire_optimal", "type": "function", "doc": "<p>Returns whether a laissez-faire policy is optimal.</p>\n\n<p>A laissez-faire policy (that authorises any takeover) is optimal, if:</p>\n\n<ol>\n<li>Incumbent is expected to shelve ($p(\\pi^M_I-\\pi^m_I) &lt; K$).</li>\n<li>Financial imperfections are severe ($F(\\bar{A}^T)\\ge\\Phi^T(\\cdot)$).</li>\n<li>Approving early takeovers followed by shelving is optimal ($F(\\bar{A}^T)\\ge\\Lambda(\\cdot)$).</li>\n<li>Detrimental effect of less intense product market competition is dominated by the benefit of making it more\nlikely that the innovation is commercialised (Condition 6 not satisfied).</li>\n</ol>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If a laissez-faire merger policy is optimal.</li>\n</ul>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.PerfectInformation.is_intermediate_optimal", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended", "qualname": "PerfectInformation.is_intermediate_optimal", "type": "function", "doc": "<p>Returns whether an intermediate merger policy (late takeover allowed) is optimal.</p>\n\n<p>An intermediate merger policy (late takeovers allowed) is optimal, if:</p>\n\n<ol>\n<li>Incumbent is expected to shelve ($p(\\pi^M_I-\\pi^m_I) &lt; K$).</li>\n<li>Approving early takeovers followed by shelving is not optimal ($F(\\bar{A}^T) &lt; \\Lambda(\\cdot)$).</li>\n<li>Detrimental effect of less intense product market competition is dominated by the benefit of making it more\nlikely that the innovation is commercialised (Condition 6 not satisfied).</li>\n</ol>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If an intermediate merger policy (late takeover allowed) is optimal.</li>\n</ul>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.EquityContract", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended", "qualname": "EquityContract", "type": "class", "doc": "<p>Add functionality to determine the optimal merger policy for a given set of parameters.</p>\n\n<p>Annotation: As discussed in section 5.1, a policy that is more lenient with respect to early acquisitions is always\ndominated by a strict merger policy. Therefore, only the three remaining policies are discussed.</p>\n", "bases": "Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.EquityContract.asset_threshold_late_takeover", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended", "qualname": "EquityContract.asset_threshold_late_takeover", "type": "variable", "doc": "<p>The prospect that the start-up will be acquired at $t = 2$ alleviates financial constraints: there exists a\nthreshold level $\\bar{A}^T = B - (\\pi_I^M - K)$</p>\n", "annotation": ": float"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.EquityContract.does_startup_strictly_prefer_debt", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended", "qualname": "EquityContract.does_startup_strictly_prefer_debt", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.EquityContract.is_intermediate_optimal", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended", "qualname": "EquityContract.is_intermediate_optimal", "type": "function", "doc": "<p>Returns whether an intermediate merger policy (late takeover allowed) is optimal.</p>\n\n<p>An intermediate merger policy (late takeovers allowed) is optimal, if:</p>\n\n<ol>\n<li>Incumbent is expected to shelve ($p(\\pi^M_I-\\pi^m_I) &lt; K$).</li>\n<li>Approving early takeovers followed by shelving is not optimal ($F(\\bar{A}^T) &lt; \\Lambda(\\cdot)$).</li>\n<li>Detrimental effect of less intense product market competition is dominated by the benefit of making it more\nlikely that the innovation is commercialised (Condition 6 not satisfied).</li>\n</ol>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If an intermediate merger policy (late takeover allowed) is optimal.</li>\n</ul>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.EquityContract.is_laissez_faire_optimal", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.BaseExtended", "qualname": "EquityContract.is_laissez_faire_optimal", "type": "function", "doc": "<p>Returns whether a laissez-faire policy is optimal.</p>\n\n<p>A laissez-faire policy (that authorises any takeover) is optimal, if:</p>\n\n<ol>\n<li>Incumbent is expected to shelve ($p(\\pi^M_I-\\pi^m_I) &lt; K$).</li>\n<li>Financial imperfections are severe ($F(\\bar{A}^T)\\ge\\Phi^T(\\cdot)$).</li>\n<li>Approving early takeovers followed by shelving is optimal ($F(\\bar{A}^T)\\ge\\Lambda(\\cdot)$).</li>\n<li>Detrimental effect of less intense product market competition is dominated by the benefit of making it more\nlikely that the innovation is commercialised (Condition 6 not satisfied).</li>\n</ol>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If a laissez-faire merger policy is optimal.</li>\n</ul>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Distributions", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Distributions", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Distributions.NormalDistribution", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Distributions", "qualname": "NormalDistribution", "type": "class", "doc": "<p>Represents a normal distribution function.</p>\n\n<p>Parameters for the distribution:</p>\n\n<ul>\n<li>loc: mean of the normal  distribution</li>\n<li>scale: standard deviation of the normal distribution</li>\n</ul>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Distributions.NormalDistribution.__init__", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Distributions", "qualname": "NormalDistribution.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Distributions.NormalDistribution.cumulative", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Distributions", "qualname": "NormalDistribution.cumulative", "type": "function", "doc": "<p>Returns the value of the cumulative distribution function.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (float):\nValue to get the corresponding value of the cumulative distribution function.</li>\n<li><strong>kwargs</strong>: Parameters for the distribution (-> see class documentation)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Value of the cumulative distribution function.</li>\n</ul>\n", "signature": "(x: float, **kwargs) -> float", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Distributions.NormalDistribution.inverse_cumulative", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Distributions", "qualname": "NormalDistribution.inverse_cumulative", "type": "function", "doc": "<p>Returns the value of the inverse cumulative distribution function (percent point function).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>q</strong> (float):\nValue to get the corresponding value of the inverse cumulative distribution function.</li>\n<li><strong>kwargs</strong>: Parameters for the distribution (-> see class documentation)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Value of the inverse cumulative distribution function.</li>\n</ul>\n", "signature": "(q: float, **kwargs) -> float", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Distributions.UniformDistribution", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Distributions", "qualname": "UniformDistribution", "type": "class", "doc": "<p>Represents a uniform distribution function ($U_{[loc, loc+scale]}$).</p>\n\n<p>Parameters for the distribution:</p>\n\n<ul>\n<li>loc: start of distribution</li>\n<li>scale: difference added to the start of the beginning of the distribution (-> defining the end of the distribution)</li>\n</ul>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Distributions.UniformDistribution.__init__", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Distributions", "qualname": "UniformDistribution.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Distributions.UniformDistribution.cumulative", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Distributions", "qualname": "UniformDistribution.cumulative", "type": "function", "doc": "<p></p>\n", "signature": "(x: float, **kwargs) -> float", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Distributions.UniformDistribution.inverse_cumulative", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Distributions", "qualname": "UniformDistribution.inverse_cumulative", "type": "function", "doc": "<p></p>\n", "signature": "(q: float, **kwargs) -> float", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Exceptions", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Exceptions", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Exceptions.MergerPolicyNotAvailable", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Exceptions", "qualname": "MergerPolicyNotAvailable", "type": "class", "doc": "<p>Method or function hasn't been implemented yet.</p>\n", "bases": "builtins.NotImplementedError"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Extension", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Extension", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Extension.ProCompetitive", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Extension", "qualname": "ProCompetitive", "type": "class", "doc": "<p>Add functionality to determine the optimal merger policy for a given set of parameters.</p>\n\n<p>Annotation: As discussed in section 5.1, a policy that is more lenient with respect to early acquisitions is always\ndominated by a strict merger policy. Therefore, only the three remaining policies are discussed.</p>\n", "bases": "Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Extension.ProCompetitive.__init__", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Extension", "qualname": "ProCompetitive.__init__", "type": "function", "doc": "<p>Takes the same arguments as BaseModel.__init__.</p>\n", "signature": "(self, consumer_surplus_without_innovation: float = 0.3, **kwargs)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Extension.ProCompetitive.is_strict_optimal", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Extension", "qualname": "ProCompetitive.is_strict_optimal", "type": "function", "doc": "<p>Returns whether the strict merger policy is optimal.</p>\n\n<p>The strict merger is optimal, if the other policies are not optimal.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If the strict merger policy is optimal.</li>\n</ul>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Extension.ProCompetitive.is_intermediate_optimal", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Extension", "qualname": "ProCompetitive.is_intermediate_optimal", "type": "function", "doc": "<p>Returns whether an intermediate merger policy (late takeover allowed) is optimal.</p>\n\n<p>An intermediate merger policy (late takeovers allowed) is optimal, if:</p>\n\n<ol>\n<li>Incumbent is expected to shelve ($p(\\pi^M_I-\\pi^m_I) &lt; K$).</li>\n<li>Approving early takeovers followed by shelving is not optimal ($F(\\bar{A}^T) &lt; \\Lambda(\\cdot)$).</li>\n<li>Detrimental effect of less intense product market competition is dominated by the benefit of making it more\nlikely that the innovation is commercialised (Condition 6 not satisfied).</li>\n</ol>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If an intermediate merger policy (late takeover allowed) is optimal.</li>\n</ul>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Extension.ProCompetitive.is_laissez_faire_optimal", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Extension", "qualname": "ProCompetitive.is_laissez_faire_optimal", "type": "function", "doc": "<p>Returns whether a laissez-faire policy is optimal.</p>\n\n<p>A laissez-faire policy (that authorises any takeover) is optimal, if:</p>\n\n<ol>\n<li>Incumbent is expected to shelve ($p(\\pi^M_I-\\pi^m_I) &lt; K$).</li>\n<li>Financial imperfections are severe ($F(\\bar{A}^T)\\ge\\Phi^T(\\cdot)$).</li>\n<li>Approving early takeovers followed by shelving is optimal ($F(\\bar{A}^T)\\ge\\Lambda(\\cdot)$).</li>\n<li>Detrimental effect of less intense product market competition is dominated by the benefit of making it more\nlikely that the innovation is commercialised (Condition 6 not satisfied).</li>\n</ol>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If a laissez-faire merger policy is optimal.</li>\n</ul>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Extension.ResourceWaste", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Extension", "qualname": "ResourceWaste", "type": "class", "doc": "<p>Add functionality to determine the optimal merger policy for a given set of parameters.</p>\n\n<p>Annotation: As discussed in section 5.1, a policy that is more lenient with respect to early acquisitions is always\ndominated by a strict merger policy. Therefore, only the three remaining policies are discussed.</p>\n", "bases": "ProCompetitive"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Extension.ResourceWaste.__init__", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Extension", "qualname": "ResourceWaste.__init__", "type": "function", "doc": "<p>Takes the same arguments as BaseModel.__init__.</p>\n", "signature": "(self, consumer_surplus_duopoly=0.41, **kwargs)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Extension.ResourceWaste.is_strict_optimal", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Extension", "qualname": "ResourceWaste.is_strict_optimal", "type": "function", "doc": "<p>Returns whether the strict merger policy is optimal.</p>\n\n<p>The strict merger is optimal, if the other policies are not optimal.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If the strict merger policy is optimal.</li>\n</ul>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Extension.ResourceWaste.is_intermediate_optimal", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Extension", "qualname": "ResourceWaste.is_intermediate_optimal", "type": "function", "doc": "<p>Returns whether an intermediate merger policy (late takeover allowed) is optimal.</p>\n\n<p>An intermediate merger policy (late takeovers allowed) is optimal, if:</p>\n\n<ol>\n<li>Incumbent is expected to shelve ($p(\\pi^M_I-\\pi^m_I) &lt; K$).</li>\n<li>Approving early takeovers followed by shelving is not optimal ($F(\\bar{A}^T) &lt; \\Lambda(\\cdot)$).</li>\n<li>Detrimental effect of less intense product market competition is dominated by the benefit of making it more\nlikely that the innovation is commercialised (Condition 6 not satisfied).</li>\n</ol>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If an intermediate merger policy (late takeover allowed) is optimal.</li>\n</ul>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Extension.ResourceWaste.is_laissez_faire_optimal", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Extension", "qualname": "ResourceWaste.is_laissez_faire_optimal", "type": "function", "doc": "<p>Returns whether a laissez-faire policy is optimal.</p>\n\n<p>A laissez-faire policy (that authorises any takeover) is optimal, if:</p>\n\n<ol>\n<li>Incumbent is expected to shelve ($p(\\pi^M_I-\\pi^m_I) &lt; K$).</li>\n<li>Financial imperfections are severe ($F(\\bar{A}^T)\\ge\\Phi^T(\\cdot)$).</li>\n<li>Approving early takeovers followed by shelving is optimal ($F(\\bar{A}^T)\\ge\\Lambda(\\cdot)$).</li>\n<li>Detrimental effect of less intense product market competition is dominated by the benefit of making it more\nlikely that the innovation is commercialised (Condition 6 not satisfied).</li>\n</ol>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If a laissez-faire merger policy is optimal.</li>\n</ul>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Extension.ResourceWaste.is_financial_imperfection_severe_without_late_takeover", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Extension", "qualname": "ResourceWaste.is_financial_imperfection_severe_without_late_takeover", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Types", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Types", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Types.MergerPolicies", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Types", "qualname": "MergerPolicies", "type": "class", "doc": "<p>Defines the available merger policies in the models.</p>\n", "bases": "enum.Enum"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Types.MergerPolicies.Strict", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Types", "qualname": "MergerPolicies.Strict", "type": "variable", "doc": "<p>The AA authorises only takeovers that, at the moment in which they are reviewed, are expected to increase total welfare.</p>\n", "default_value": " = <MergerPolicies.Strict: 'Strict'>"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Types.MergerPolicies.Intermediate_late_takeover_prohibited", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Types", "qualname": "MergerPolicies.Intermediate_late_takeover_prohibited", "type": "variable", "doc": "<p>The AA blocks late takeovers, but is more lenient with early takeovers.</p>\n", "default_value": " = <MergerPolicies.Intermediate_late_takeover_prohibited: 'Intermediate (late takeover prohibited)'>"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Types.MergerPolicies.Intermediate_late_takeover_allowed", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Types", "qualname": "MergerPolicies.Intermediate_late_takeover_allowed", "type": "variable", "doc": "<p>The AA authorises late takeovers, but is stricter with early takeovers.</p>\n", "default_value": " = <MergerPolicies.Intermediate_late_takeover_allowed: 'Intermediate (late takeover allowed)'>"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Types.MergerPolicies.Laissez_faire", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Types", "qualname": "MergerPolicies.Laissez_faire", "type": "variable", "doc": "<p>The intervention threshold of the AA is so high that any acquisition would be allowed.</p>\n", "default_value": " = <MergerPolicies.Laissez_faire: 'Laissez-faire'>"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Types.MergerPolicies.abbreviation", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Types", "qualname": "MergerPolicies.abbreviation", "type": "function", "doc": "<p>Generates a string containing the abbreviation of the current merger policy.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: Abbreviation of the current merger policy.</li>\n</ul>\n", "signature": "(self) -> str", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Types.MergerPolicies.legend", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Types", "qualname": "MergerPolicies.legend", "type": "function", "doc": "<p>Generates a string containing the legend of the possible merger policies.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: Containing the legend for the merger policies.</li>\n</ul>\n", "signature": "() -> str", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Types.Takeover", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Types", "qualname": "Takeover", "type": "class", "doc": "<p>Defines the available options for a takeover of the start-up by the incumbent.</p>\n", "bases": "enum.Enum"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Types.Takeover.No", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Types", "qualname": "Takeover.No", "type": "variable", "doc": "<p>The incumbent does not bid for the start-up.</p>\n", "default_value": " = <Takeover.No: 'No bid'>"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Types.Takeover.Separating", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Types", "qualname": "Takeover.Separating", "type": "variable", "doc": "<p>The incumbent offers a low takeover price targeting only the credit-rationed start-ups.</p>\n", "default_value": " = <Takeover.Separating: 'Separating bid'>"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Types.Takeover.Pooling", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Types", "qualname": "Takeover.Pooling", "type": "variable", "doc": "<p>The incumbent offers a high takeover price such that a start-up would always accept, irrespective of the amount of own assets.</p>\n", "default_value": " = <Takeover.Pooling: 'Pooling bid'>"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Types.Takeover.abbreviation", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Types", "qualname": "Takeover.abbreviation", "type": "function", "doc": "<p>Generates a string containing the abbreviation of the current takeover option.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: Abbreviation of the current takeover option.</li>\n</ul>\n", "signature": "(self) -> str", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Types.Takeover.legend", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Types", "qualname": "Takeover.legend", "type": "function", "doc": "<p>Generates a string containing the legend of the possible takeover options.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: Containing the legend for the takeover options.</li>\n</ul>\n", "signature": "() -> str", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Types.ThresholdItem", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Types", "qualname": "ThresholdItem", "type": "class", "doc": "<p>Threshold item containing the name (string representation) and the value (threshold express in float value).</p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Types.ThresholdItem.__init__", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Types", "qualname": "ThresholdItem.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, name: str, value: float, include: bool = False)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Types.ThresholdItem.include", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Types", "qualname": "ThresholdItem.include", "type": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": " = False"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Types.Summary", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Types", "qualname": "Summary", "type": "class", "doc": "<p>Summary of Fumagalli_Motta_Tarantino_2020.Models.MergerPolicy.</p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Types.Summary.__init__", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Types", "qualname": "Summary.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    set_policy: Fumagalli_Motta_Tarantino_2020.Models.Types.MergerPolicies,\n    credit_rationed: bool,\n    early_bidding_type: Fumagalli_Motta_Tarantino_2020.Models.Types.Takeover,\n    late_bidding_type: Fumagalli_Motta_Tarantino_2020.Models.Types.Takeover,\n    development_attempt: bool,\n    development_outcome: bool,\n    early_takeover: bool,\n    late_takeover: bool\n)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Types.OptimalMergerPolicySummary", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Types", "qualname": "OptimalMergerPolicySummary", "type": "class", "doc": "<p>Summary of Fumagalli_Motta_Tarantino_2020.Models.OptimalMergerPolicy.</p>\n", "bases": "Summary"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Models.Types.OptimalMergerPolicySummary.__init__", "modulename": "Fumagalli_Motta_Tarantino_2020.Models.Types", "qualname": "OptimalMergerPolicySummary.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    set_policy: Fumagalli_Motta_Tarantino_2020.Models.Types.MergerPolicies,\n    credit_rationed: bool,\n    early_bidding_type: Fumagalli_Motta_Tarantino_2020.Models.Types.Takeover,\n    late_bidding_type: Fumagalli_Motta_Tarantino_2020.Models.Types.Takeover,\n    development_attempt: bool,\n    development_outcome: bool,\n    early_takeover: bool,\n    late_takeover: bool,\n    optimal_policy: Fumagalli_Motta_Tarantino_2020.Models.Types.MergerPolicies\n)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Notebooks", "modulename": "Fumagalli_Motta_Tarantino_2020.Notebooks", "type": "module", "doc": "<p>This subpackage provides jupyter notebooks to understand the main package as well as notebooks for the analysis.</p>\n\n<p>Includes the following notebooks:</p>\n\n<ul>\n<li><a href=\"https://github.com/manuelbieri/Fumagalli_2020/blob/master/Fumagalli_Motta_Tarantino_2020/Notebooks/Analysis.ipynb\">Analysis.ipynb</a>\n<ul>\n<li>Contains a narrative analysis of the models</li>\n</ul></li>\n<li><a href=\"https://github.com/manuelbieri/Fumagalli_2020/blob/master/Fumagalli_Motta_Tarantino_2020/Notebooks/Configurations.ipynb\">Configurations.ipynb</a>\n<ul>\n<li>Plots all preset configurations</li>\n</ul></li>\n<li><a href=\"https://github.com/manuelbieri/Fumagalli_2020/blob/master/Fumagalli_Motta_Tarantino_2020/Notebooks/Figures.ipynb\">Figures.ipynb</a>\n<ul>\n<li>Generates all figures used in thesis</li>\n</ul></li>\n<li><a href=\"https://github.com/manuelbieri/Fumagalli_2020/blob/master/Fumagalli_Motta_Tarantino_2020/Notebooks/Tutorial.ipynb\">Tutorial.ipynb</a>\n<ul>\n<li>Contains a tutorial for the package</li>\n</ul></li>\n</ul>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Notebooks.NotebookUtilities", "modulename": "Fumagalli_Motta_Tarantino_2020.Notebooks.NotebookUtilities", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Notebooks.NotebookUtilities.configure_two_axes", "modulename": "Fumagalli_Motta_Tarantino_2020.Notebooks.NotebookUtilities", "qualname": "configure_two_axes", "type": "function", "doc": "<p>Creates a figure with two subplots in a row.</p>\n", "signature": "(\n    main='',\n    sub1='',\n    sub2='',\n    m1: Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy = None,\n    m2: Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy = None,\n    c1: int = 1,\n    c2: int = 2,\n    v1=<class 'Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges.MergerPoliciesAssetRange'>,\n    v2=<class 'Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges.MergerPoliciesAssetRange'>,\n    **kwargs\n) -> matplotlib.figure.Figure", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Notebooks.NotebookUtilities.get_plot_kwargs", "modulename": "Fumagalli_Motta_Tarantino_2020.Notebooks.NotebookUtilities", "qualname": "get_plot_kwargs", "type": "function", "doc": "<p></p>\n", "signature": "(title: str, **kwargs)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Notebooks.NotebookUtilities.get_model_by_id", "modulename": "Fumagalli_Motta_Tarantino_2020.Notebooks.NotebookUtilities", "qualname": "get_model_by_id", "type": "function", "doc": "<p>Returns a valid model from a preset configuration, which is identified by an integer id.</p>\n", "signature": "(\n    c: int,\n    prefered_type=<class 'Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy'>,\n    **kwargs\n) -> Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Project", "modulename": "Fumagalli_Motta_Tarantino_2020.Project", "type": "module", "doc": "<h2 id=\"project-structure\">Project Structure</h2>\n\n<p>Build the folder structure with the following command (or execute <code>assets/Structure/tree.sh</code>):</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>git config --global alias.tree <span class=\"s1\">&#39;! git ls-tree --full-name --name-only -t -r HEAD | sed -e &quot;s/[^-][^\\/]*\\//   |/g&quot; -e &quot;s/|\\([^ ]\\)/|-- \\1/&quot;&#39;</span>\ngit tree\n</code></pre></div>\n\n<p>This command just works for Git - repositories and not for folder structures in general.</p>\n\n<p>This is the annotated folder structure:</p>\n\n<pre><code>.github\n   |-- workflows\n   |   |-- Black.yml  # Checks the code style on errors\n   |   |-- CodeCov.yml  # Pushes the newest CI results to codecov.io\n   |   |-- PyPI.yml  # Publishes releases automatically on PyPI\n   |   |-- codeql-analysis.yml  # Checks for weaknesses in code\nFumagalli_Motta_Tarantino_2020  # Package as published on PyPI\n   |-- Configurations  # Package to load preset configurations\n   |-- Notebooks\n   |   |-- Analysis.ipynb  # Contains a narrative analysis of the models\n   |   |-- Configurations.ipynb  # Plots all preset configurations\n   |   |-- Figures.ipynb  # Generates all figures used in thesis\n   |   |-- Tutorial.ipynb  # Contains a tutorial for the package\n   |   |-- __init__.py\n   |-- tests  # Test package, which tests all classes in the main package\n   |-- AdditionalModels.py  # Models: CournotCompetition, EquityContract and PerfectInformation\n   |-- Distributions.py  # Provides a uniform and normal distribution (respective their cumulative function and inverse)\n   |-- Exceptions.py  # Provides useful custom exceptions\n   |-- ExtensionModels.py  # Models: ProCompetitive and ResourceWaste\n   |-- Models.py  # Provides the implementation of the base model\n   |-- Project.py  # Contains information about the project\n   |-- Types.py  # Provides Enum (merger policies and bidding types) and dataclasses\n   |-- Visualize.py  # Provides visualization interface and Timeline and payoff plots\n   |-- VisualizeRanges.py  # Provides plots for ranges and an overview plot\n   |-- __init__.py\nassets  # Additional ressources regarding the code\n   |-- Structure  # Contains informations about the project and code structure\n   |   |-- README.md  # This file\n   |   |-- class_diagram.drawio  # UML class diagram\n   |   |-- tree.sh  # Generates this tree of the project structure\n   |-- code style  # Bash scripts for automatic check and enforcement of code style\n   |   |-- check_black.sh\n   |   |-- run_black.sh\n   |-- visual  # Contains graphics\n   |   |-- class_diagram.svg\n   |   |-- logo.svg\ndocs  # Contains the files for the documentation page (automatically generated with pdoc)\n   |-- build.sh  # Bash script for automatic build of documentation\nCITATION.cff  # Citation of the repository\nFumagalli et al (2020) - Shelving or developing The Aquisition of potential competitors under financial constraints.pdf\nLICENSE  # MIT\nREADME.md  # Introduction to the repository\nrequirements.txt  # Dependcies for the repository\nsetup.py  # Setup script for publication on PyPI\n</code></pre>\n\n<h2 id=\"class-diagram\">Class diagram</h2>\n\n<p><img src=\"../visual/class_diagram.svg\" alt=\"Class diagram\" /> (If the class diagram is not shown, follow this <a href=\"https://github.com/manuelbieri/Fumagalli_2020/blob/master/assets/visual/class_diagram.svg\">link</a>)</p>\n\n<h2 id=\"code-style\">Code style</h2>\n\n<p>As default code style <a href=\"https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html\">Black</a> is used and\nautomatically checked and enforced by GitHub - workflows.</p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests", "type": "module", "doc": "<h1 id=\"explanations-about-the-unittests\">Explanations about the Unittests</h1>\n\n<p>In this file the different Test cases used, are explained. Tests written in bold letters are not yet implemented, but needed for full coverage.</p>\n\n<h2 id=\"glossary-about-the-naming-of-tests\">Glossary about the naming of tests</h2>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:left;\">Part of name</th>\n  <th style=\"text-align:left;\">Remark</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:left;\"><em>not_profitable</em></td>\n  <td style=\"text-align:left;\">$p(\\pi^M_I-\\pi^m_I) &lt; K$ is satisfied</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><em>profitable</em></td>\n  <td style=\"text-align:left;\">$p(\\pi^M_I-\\pi^m_I) \\ge K$ is satisfied</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><em>below_assets_threshold</em></td>\n  <td style=\"text-align:left;\">$F &lt; \\Phi$ is satisfied</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><em>above_assets_threshold</em></td>\n  <td style=\"text-align:left;\">$F \\ge \\Phi$ is satisfied</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><em>credit_rationed</em></td>\n  <td style=\"text-align:left;\">The start-up is credit constraint</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><em>not_credit_rationed</em></td>\n  <td style=\"text-align:left;\">The start-up is not credit constraint</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\"><em>unsuccessful</em></td>\n  <td style=\"text-align:left;\">The development (if it will take place) is unsuccessful, otherwise we will assume the development was successful</td>\n</tr>\n</tbody>\n</table>\n\n<p>$F$ may correspond to $F(\\bar{A})$ or $F(\\bar{A}^T)$ and $\\Phi$ to $\\Phi(\\cdot)$, $\\Phi^\\prime(\\cdot)$ or $\\Phi^T(\\cdot)$.</p>\n\n<h2 id=\"fumagalli_motta_tarantino_2020testsmockmodels\">Fumagalli_Motta_Tarantino_2020.Tests.MockModels</h2>\n\n<p>MockModels provides a stub for the OptimalMergerPolicy - class, this is used to test classes for visualizations independently\nof the implementation of the models.</p>\n\n<h2 id=\"fumagalli_motta_tarantino_2020teststest_base\">Fumagalli_Motta_Tarantino_2020.Tests.Test_Base</h2>\n\n<h3 id=\"fumagalli_motta_tarantino_2020teststest_basetestcoremodel\">Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestCoreModel</h3>\n\n<p>This testcase test, whether Fumagalli_Motta_Tarantino_2020.Models.Base.CoreModel is set up in a valid way.</p>\n\n<h3 id=\"fumagalli_motta_tarantino_2020teststest_basetestproperties\">Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestProperties</h3>\n\n<p>This testcase includes tests for the following matters:</p>\n\n<ul>\n<li>Test properties (public access for private variables)</li>\n<li>Test necessary conditions for correct values (see pre- and post-conditions)</li>\n</ul>\n\n<h3 id=\"fumagalli_motta_tarantino_2020teststest_basetestmergerpolicy\">Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestMergerPolicy</h3>\n\n<p>This  testcase tests, whether Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy properly works.</p>\n\n<h3 id=\"fumagalli_motta_tarantino_2020teststest_basetestlaissezfairemergerpolicy\">Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestLaissezFaireMergerPolicy</h3>\n\n<p>This testcase tests, whether the implemented logic for a laissez-faire merger policy works as expected. The following tests are included:</p>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:left;\">Name of test</th>\n  <th style=\"text-align:center;\">Is the start-up credit rationed?</th>\n  <th style=\"text-align:center;\">Early bidding type (t=1)</th>\n  <th style=\"text-align:center;\">Late bidding type (t=2)</th>\n  <th style=\"text-align:center;\">Development attempt?</th>\n  <th style=\"text-align:center;\">Development success</th>\n  <th style=\"text-align:center;\">Early takeover (t=1)</th>\n  <th style=\"text-align:center;\">Late takeover (t=2)</th>\n  <th style=\"text-align:center;\">Killer Acquisition?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_below_assets_threshold_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">True</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_above_assets_threshold_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_above_assets_threshold_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_below_assets_threshold_not_credit_rationed_unsuccessful</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Separating</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Separating</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_not_credit_rationed_unsuccessful</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Separating</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n</tbody>\n</table>\n\n<h3 id=\"fumagalli_motta_tarantino_2020teststest_basetestintermediatelatetakeoverallowedmergerpolicy\">Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestIntermediateLateTakeoverAllowedMergerPolicy</h3>\n\n<p>This testcase tests, whether the implemented logic for an intermediate merger policy (late takeovers are allowed) works as expected. The following tests are included:</p>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:left;\">Name of test</th>\n  <th style=\"text-align:center;\">Is the start-up credit rationed?</th>\n  <th style=\"text-align:center;\">Early bidding type (t=1)</th>\n  <th style=\"text-align:center;\">Late bidding type (t=2)</th>\n  <th style=\"text-align:center;\">Development attempt?</th>\n  <th style=\"text-align:center;\">Development success</th>\n  <th style=\"text-align:center;\">Early takeover (t=1)</th>\n  <th style=\"text-align:center;\">Late takeover (t=2)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">True</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_not_credit_rationed_unsuccessful</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Separating</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Separating</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">True</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_not_credit_rationed_unsuccessful</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Separating</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n</tbody>\n</table>\n\n<h3 id=\"fumagalli_motta_tarantino_2020teststest_basetestintermediatelatetakeoverprohibitedmergerpolicy\">Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestIntermediateLateTakeoverProhibitedMergerPolicy</h3>\n\n<p>This testcase tests, whether the implemented logic for an intermediate merger policy (late takeovers are prohibited) works as expected. The following tests are included:</p>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:left;\">Name of test</th>\n  <th style=\"text-align:center;\">Is the start-up credit rationed?</th>\n  <th style=\"text-align:center;\">Early bidding type (t=1)</th>\n  <th style=\"text-align:center;\">Late bidding type (t=2)</th>\n  <th style=\"text-align:center;\">Development attempt?</th>\n  <th style=\"text-align:center;\">Development success</th>\n  <th style=\"text-align:center;\">Early takeover (t=1)</th>\n  <th style=\"text-align:center;\">Late takeover (t=2)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_below_assets_threshold_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_above_assets_threshold_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_above_assets_threshold_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Separating</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_above_assets_threshold_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Separating</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_below_assets_threshold_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_below_assets_threshold_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n</tbody>\n</table>\n\n<h3 id=\"fumagalli_motta_tarantino_2020teststest_baseteststrictmergerpolicy\">Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestStrictMergerPolicy</h3>\n\n<p>This testcase tests, whether the implemented logic for a strict merger policy works as expected. The following tests are included:</p>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:left;\">New Name of test</th>\n  <th style=\"text-align:center;\">Is the start-up credit rationed?</th>\n  <th style=\"text-align:center;\">Early bidding type (t=1)</th>\n  <th style=\"text-align:center;\">Late bidding type (t=2)</th>\n  <th style=\"text-align:center;\">Development attempt?</th>\n  <th style=\"text-align:center;\">Development success</th>\n  <th style=\"text-align:center;\">Early takeover (t=1)</th>\n  <th style=\"text-align:center;\">Late takeover (t=2)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_below_assets_threshold_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_below_assets_threshold_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_above_assets_threshold_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Separating</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_above_assets_threshold_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Separating</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n</tbody>\n</table>\n\n<p>Additionally, the recalculations of the model after changed properties are tested.</p>\n\n<h3 id=\"fumagalli_motta_tarantino_2020teststest_basetestoptimalmergerpolicy\">Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestOptimalMergerPolicy</h3>\n\n<p>This testcase tests all possibilities for an optimal merger policy in Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy.</p>\n\n<h2 id=\"fumagalli_motta_tarantino_2020teststest_baseextended\">Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended</h2>\n\n<h3 id=\"fumagalli_motta_tarantino_2020teststest_baseextendedtestcournotcompetition\">Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestCournotCompetition</h3>\n\n<p>This testcase tests the adjustments made for the Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.CournotCompetition, which is largely based on the OptimalMergerPolicyModel.</p>\n\n<h3 id=\"fumagalli_motta_tarantino_2020teststest_baseextendedtestperfectinformation\">Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestPerfectInformation</h3>\n\n<p>This testcase tests, whether the implemented logic in Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.PerfectInformation works as expected.</p>\n\n<h3 id=\"fumagalli_motta_tarantino_2020teststest_baseextendedteststrictperfectinformation\">Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestStrictPerfectInformation</h3>\n\n<p>This testcase tests, whether the implemented logic in Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.PerfectInformation for a strict merger policy works as expected. The following tests are included:</p>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:left;\">Name of test</th>\n  <th style=\"text-align:center;\">Is the start-up credit rationed?</th>\n  <th style=\"text-align:center;\">Early bidding type (t=1)</th>\n  <th style=\"text-align:center;\">Late bidding type (t=2)</th>\n  <th style=\"text-align:center;\">Development attempt?</th>\n  <th style=\"text-align:center;\">Development success</th>\n  <th style=\"text-align:center;\">Early takeover (t=1)</th>\n  <th style=\"text-align:center;\">Late takeover (t=2)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Separating</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n</tbody>\n</table>\n\n<h3 id=\"fumagalli_motta_tarantino_2020teststest_baseextendedtestintermediateperfectinformation\">Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestIntermediatePerfectInformation</h3>\n\n<p>This testcase tests, whether the implemented logic in Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.PerfectInformation for an intermediate merger policy (late takeovers are allowed) works as expected. The following tests are included:</p>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:left;\">Name of test</th>\n  <th style=\"text-align:center;\">Is the start-up credit rationed?</th>\n  <th style=\"text-align:center;\">Early bidding type (t=1)</th>\n  <th style=\"text-align:center;\">Late bidding type (t=2)</th>\n  <th style=\"text-align:center;\">Development attempt?</th>\n  <th style=\"text-align:center;\">Development success</th>\n  <th style=\"text-align:center;\">Early takeover (t=1)</th>\n  <th style=\"text-align:center;\">Late takeover (t=2)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">True</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_not_credit_rationed_unsuccessful</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Separating</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n</tbody>\n</table>\n\n<h3 id=\"fumagalli_motta_tarantino_2020teststest_baseextendedtestlaissezfaireperfectinformation\">Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestLaissezFairePerfectInformation</h3>\n\n<p>This testcase tests, whether the implemented logic in Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.PerfectInformation for a laissez-faire merger policy works as expected. The following tests are included:</p>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:left;\">Name of test</th>\n  <th style=\"text-align:center;\">Is the start-up credit rationed?</th>\n  <th style=\"text-align:center;\">Early bidding type (t=1)</th>\n  <th style=\"text-align:center;\">Late bidding type (t=2)</th>\n  <th style=\"text-align:center;\">Development attempt?</th>\n  <th style=\"text-align:center;\">Development success</th>\n  <th style=\"text-align:center;\">Early takeover (t=1)</th>\n  <th style=\"text-align:center;\">Late takeover (t=2)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_not_profitable_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_not_credit_rationed</td>\n  <td style=\"text-align:center;\">False</td>\n  <td style=\"text-align:center;\">Pooling</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">test_profitable_credit_rationed</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Separating</td>\n  <td style=\"text-align:center;\">No</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">Does not matter</td>\n  <td style=\"text-align:center;\">True</td>\n  <td style=\"text-align:center;\">False</td>\n</tr>\n</tbody>\n</table>\n\n<h3 id=\"fumagalli_motta_tarantino_2020teststest_baseextendedtestequitycontract\">Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestEquityContract</h3>\n\n<p>This testcase tests, whether the implemented logic in Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.Equity works as expected.</p>\n\n<h2 id=\"fumagalli_motta_tarantino_2020teststest_visualize\">Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize</h2>\n\n<p>This testcase test the plots in Fumagalli_Motta_Tarantino_2020.Visualizations made with mock objects. The plots are tested by eye, since currently no method exists, to write\nstable unitest for matplotlib. </p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.MockModels", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.MockModels", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.MockModels.mock_optimal_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.MockModels", "qualname": "mock_optimal_merger_policy", "type": "function", "doc": "<p>Creates a mock model of Fumagalli_Motta_Tarantino_2020.Models.OptimalMergerPolicy.</p>\n", "signature": "(\n    asset_threshold: float = 0.5,\n    asset_threshold_late_takeover: float = -1,\n    credit_constrained: bool = False,\n    policy: Fumagalli_Motta_Tarantino_2020.Models.Types.MergerPolicies = <MergerPolicies.Intermediate_late_takeover_prohibited: 'Intermediate (late takeover prohibited)'>,\n    **kwargs\n) -> Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.CoreTest", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "CoreTest", "type": "class", "doc": "<p>Provides useful methods for the use in tests.</p>\n", "bases": "unittest.case.TestCase"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.CoreTest.are_floats_equal", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "CoreTest.are_floats_equal", "type": "function", "doc": "<p>Compares two floats for equality with respect to a tolerance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>f1</strong> (float):\nFirst float for the comparison</li>\n<li><strong>f2</strong> (float):\nSecond float for the comparison</li>\n<li><strong>tolerance</strong> (float):\nMax. difference between the floats to consider them equal</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>True</strong>: If the floats are equal</li>\n</ul>\n", "signature": "(f1: float, f2: float, tolerance: float = 1e-10) -> float", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.CoreTest.get_default_value", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "CoreTest.get_default_value", "type": "function", "doc": "<p>Returns the default value of a parameters of specific model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arg_name</strong> (str):\nName of the parameter</li>\n<li><strong>model</strong>: Type of the model to get the default value from</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Default value of the parameter</li>\n</ul>\n", "signature": "(\n    arg_name: str,\n    model=<class 'Fumagalli_Motta_Tarantino_2020.Models.Base.CoreModel'>\n) -> float", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.CoreTest.get_welfare_value", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "CoreTest.get_welfare_value", "type": "function", "doc": "<p>Calculates the default value of welfare for a specific model and market situation.</p>\n\n<p>Market situations:</p>\n\n<ul>\n<li>duopoly</li>\n<li>monopoly with innovation</li>\n<li>monopoly without innovation</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>market_situation</strong> (Literal[\"duopoly\", \"with_innovation\", \"without_innovation\"]):\nTo calculate the total welfare for</li>\n<li><strong>model</strong>: Type of the model to get the default value from</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Default value of the total welfare</li>\n</ul>\n", "signature": "(\n    self,\n    market_situation: Literal['duopoly', 'with_innovation', 'without_innovation'],\n    model=<class 'Fumagalli_Motta_Tarantino_2020.Models.Base.CoreModel'>\n) -> float", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestCoreModel", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestCoreModel", "type": "class", "doc": "<p>Provides methods for model setup and tests valid setup of model.</p>\n", "bases": "CoreTest"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestCoreModel.setupModel", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestCoreModel.setupModel", "type": "function", "doc": "<p>Sets up a model for a test.</p>\n\n<p>The type of the model is corresponding to the testcase.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>**kwargs</strong>: Parameter values for the model</li>\n</ul>\n", "signature": "(self, **kwargs) -> None", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestCoreModel.setUpConfiguration", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestCoreModel.setUpConfiguration", "type": "function", "doc": "<p>Sets up a model from a preset configuration.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>config_id</strong> (int):\nID of the preset configuration</li>\n<li><strong>merger_policy</strong> (FMT20.MergerPolicies):\nMerger policy to set in the model.</li>\n<li><strong>**kwargs</strong>: Parameter values for the model</li>\n</ul>\n", "signature": "(\n    self,\n    config_id: int,\n    merger_policy=<MergerPolicies.Strict: 'Strict'>,\n    **kwargs\n) -> None", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestCoreModel.test_valid_setup_default_values", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestCoreModel.test_valid_setup_default_values", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestCoreModel.test_uniform_distribution", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestCoreModel.test_uniform_distribution", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestProperties", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestProperties", "type": "class", "doc": "<p>Tests properties for Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.</p>\n", "bases": "TestCoreModel"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestProperties.setUp", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestProperties.setUp", "type": "function", "doc": "<p>Hook method for setting up the test fixture before exercising it.</p>\n", "signature": "(self) -> None", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestProperties.get_model_type", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestProperties.get_model_type", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestProperties.abstract_property_test", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestProperties.abstract_property_test", "type": "function", "doc": "<p>Skeleton for all tests of model properties.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<pre><code>model = FMT20.OptimalMergerPolicy()\nself.abstract_property_test(model_type.startup_assets, \"startup_assets\")\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>property_</strong>: Property of the model</li>\n<li><strong>property_name</strong> (str):\nName of the property as a string</li>\n<li><strong>invalid_value</strong> (int):\nInvalid value for the property</li>\n</ul>\n", "signature": "(self, property_, property_name: str, invalid_value=120) -> None", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestProperties.test_development_costs", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestProperties.test_development_costs", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestProperties.test_startup_assets", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestProperties.test_startup_assets", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestProperties.test_success_probability", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestProperties.test_success_probability", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestProperties.test_private_benefit", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestProperties.test_private_benefit", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestProperties.test_incumbent_profit_without_innovation", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestProperties.test_incumbent_profit_without_innovation", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestProperties.test_incumbent_profit_duopoly", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestProperties.test_incumbent_profit_duopoly", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestProperties.test_incumbent_profit_with_innovation", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestProperties.test_incumbent_profit_with_innovation", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestProperties.test_startup_profit_duopoly", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestProperties.test_startup_profit_duopoly", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestProperties.test_consumer_surplus_with_innovation", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestProperties.test_consumer_surplus_with_innovation", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestProperties.test_consumer_surplus_without_innovation", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestProperties.test_consumer_surplus_without_innovation", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestProperties.test_consumer_surplus_duopoly", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestProperties.test_consumer_surplus_duopoly", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestProperties.test_welfare_without_innovation", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestProperties.test_welfare_without_innovation", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestProperties.test_welfare_with_innovation", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestProperties.test_welfare_with_innovation", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestProperties.test_welfare_duopoly", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestProperties.test_welfare_duopoly", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestProperties.test_development_success", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestProperties.test_development_success", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestProperties.test_invalid_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestProperties.test_invalid_merger_policy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestMergerPolicy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestMergerPolicy", "type": "class", "doc": "<p>Tests Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.</p>\n", "bases": "TestCoreModel"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestMergerPolicy.setupModel", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestMergerPolicy.setupModel", "type": "function", "doc": "<p>Sets up a model for a test.</p>\n\n<p>The type of the model is corresponding to the testcase.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>**kwargs</strong>: Parameter values for the model</li>\n</ul>\n", "signature": "(self, **kwargs) -> None", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestMergerPolicy.test_tolerated_harm_strict", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestMergerPolicy.test_tolerated_harm_strict", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestMergerPolicy.test_tolerated_harm_intermediate_late_takeover_allowed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestMergerPolicy.test_tolerated_harm_intermediate_late_takeover_allowed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestMergerPolicy.test_tolerated_harm_intermediate_late_takeover_prohibited", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestMergerPolicy.test_tolerated_harm_intermediate_late_takeover_prohibited", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestMergerPolicy.test_tolerated_harm_laissez_faire", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestMergerPolicy.test_tolerated_harm_laissez_faire", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestLaissezFaireMergerPolicy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestLaissezFaireMergerPolicy", "type": "class", "doc": "<p>Tests Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.</p>\n", "bases": "TestMergerPolicy"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestLaissezFaireMergerPolicy.test_not_profitable_below_assets_threshold_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestLaissezFaireMergerPolicy.test_not_profitable_below_assets_threshold_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestLaissezFaireMergerPolicy.test_not_profitable_above_assets_threshold_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestLaissezFaireMergerPolicy.test_not_profitable_above_assets_threshold_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestLaissezFaireMergerPolicy.test_not_profitable_above_assets_threshold_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestLaissezFaireMergerPolicy.test_not_profitable_above_assets_threshold_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestLaissezFaireMergerPolicy.test_not_profitable_below_assets_threshold_not_credit_rationed_unsuccessful", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestLaissezFaireMergerPolicy.test_not_profitable_below_assets_threshold_not_credit_rationed_unsuccessful", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestLaissezFaireMergerPolicy.test_profitable_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestLaissezFaireMergerPolicy.test_profitable_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestLaissezFaireMergerPolicy.test_profitable_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestLaissezFaireMergerPolicy.test_profitable_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestLaissezFaireMergerPolicy.test_profitable_not_credit_rationed_unsuccessful", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestLaissezFaireMergerPolicy.test_profitable_not_credit_rationed_unsuccessful", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestIntermediateLateTakeoverAllowedMergerPolicy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestIntermediateLateTakeoverAllowedMergerPolicy", "type": "class", "doc": "<p>Tests Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.</p>\n", "bases": "TestMergerPolicy"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestIntermediateLateTakeoverAllowedMergerPolicy.test_not_profitable_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestIntermediateLateTakeoverAllowedMergerPolicy.test_not_profitable_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestIntermediateLateTakeoverAllowedMergerPolicy.test_not_profitable_not_credit_rationed_unsuccessful", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestIntermediateLateTakeoverAllowedMergerPolicy.test_not_profitable_not_credit_rationed_unsuccessful", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestIntermediateLateTakeoverAllowedMergerPolicy.test_not_profitable_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestIntermediateLateTakeoverAllowedMergerPolicy.test_not_profitable_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestIntermediateLateTakeoverAllowedMergerPolicy.test_profitable_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestIntermediateLateTakeoverAllowedMergerPolicy.test_profitable_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestIntermediateLateTakeoverAllowedMergerPolicy.test_profitable_not_credit_rationed_unsuccessful", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestIntermediateLateTakeoverAllowedMergerPolicy.test_profitable_not_credit_rationed_unsuccessful", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestIntermediateLateTakeoverAllowedMergerPolicy.test_profitable_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestIntermediateLateTakeoverAllowedMergerPolicy.test_profitable_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestIntermediateLateTakeoverProhibitedMergerPolicy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestIntermediateLateTakeoverProhibitedMergerPolicy", "type": "class", "doc": "<p>Tests Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.</p>\n", "bases": "TestMergerPolicy"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestIntermediateLateTakeoverProhibitedMergerPolicy.test_not_profitable_below_assets_threshold_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestIntermediateLateTakeoverProhibitedMergerPolicy.test_not_profitable_below_assets_threshold_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestIntermediateLateTakeoverProhibitedMergerPolicy.test_not_profitable_above_assets_threshold_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestIntermediateLateTakeoverProhibitedMergerPolicy.test_not_profitable_above_assets_threshold_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestIntermediateLateTakeoverProhibitedMergerPolicy.test_profitable_below_assets_threshold_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestIntermediateLateTakeoverProhibitedMergerPolicy.test_profitable_below_assets_threshold_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestIntermediateLateTakeoverProhibitedMergerPolicy.test_profitable_below_assets_threshold_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestIntermediateLateTakeoverProhibitedMergerPolicy.test_profitable_below_assets_threshold_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestIntermediateLateTakeoverProhibitedMergerPolicy.test_profitable_above_assets_threshold_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestIntermediateLateTakeoverProhibitedMergerPolicy.test_profitable_above_assets_threshold_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestIntermediateLateTakeoverProhibitedMergerPolicy.test_profitable_above_assets_threshold_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestIntermediateLateTakeoverProhibitedMergerPolicy.test_profitable_above_assets_threshold_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestStrictMergerPolicy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestStrictMergerPolicy", "type": "class", "doc": "<p>Tests Fumagalli_Motta_Tarantino_2020.Models.Base.MergerPolicy.</p>\n", "bases": "TestMergerPolicy"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestStrictMergerPolicy.test_not_profitable_not_credit_rationed_summary", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestStrictMergerPolicy.test_not_profitable_not_credit_rationed_summary", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestStrictMergerPolicy.test_not_profitable_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestStrictMergerPolicy.test_not_profitable_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestStrictMergerPolicy.test_not_profitable_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestStrictMergerPolicy.test_not_profitable_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestStrictMergerPolicy.test_set_startup_assets_recalculation", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestStrictMergerPolicy.test_set_startup_assets_recalculation", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestStrictMergerPolicy.test_set_tolerated_harm_recalculation", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestStrictMergerPolicy.test_set_tolerated_harm_recalculation", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestStrictMergerPolicy.test_set_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestStrictMergerPolicy.test_set_merger_policy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestStrictMergerPolicy.test_profitable_below_assets_threshold_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestStrictMergerPolicy.test_profitable_below_assets_threshold_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestStrictMergerPolicy.test_profitable_below_assets_threshold_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestStrictMergerPolicy.test_profitable_below_assets_threshold_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestStrictMergerPolicy.test_profitable_above_assets_threshold_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestStrictMergerPolicy.test_profitable_above_assets_threshold_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestStrictMergerPolicy.test_profitable_above_assets_threshold_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestStrictMergerPolicy.test_profitable_above_assets_threshold_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestOptimalMergerPolicy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestOptimalMergerPolicy", "type": "class", "doc": "<p>Tests Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy.</p>\n", "bases": "TestMergerPolicy"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestOptimalMergerPolicy.setupModel", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestOptimalMergerPolicy.setupModel", "type": "function", "doc": "<p>Sets up a model for a test.</p>\n\n<p>The type of the model is corresponding to the testcase.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>**kwargs</strong>: Parameter values for the model</li>\n</ul>\n", "signature": "(self, **kwargs) -> None", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestOptimalMergerPolicy.test_strict_optimal_merger_policy_summary", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestOptimalMergerPolicy.test_strict_optimal_merger_policy_summary", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestOptimalMergerPolicy.test_strict_optimal_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestOptimalMergerPolicy.test_strict_optimal_merger_policy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestOptimalMergerPolicy.test_intermediate_optimal_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestOptimalMergerPolicy.test_intermediate_optimal_merger_policy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestOptimalMergerPolicy.test_laissez_faire_optimal_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestOptimalMergerPolicy.test_laissez_faire_optimal_merger_policy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestOptimalMergerPolicy.test_string_representation", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base", "qualname": "TestOptimalMergerPolicy.test_string_representation", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestCournotCompetition", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestCournotCompetition", "type": "class", "doc": "<p>Tests Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.CournotCompetition.</p>\n", "bases": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestOptimalMergerPolicy"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestCournotCompetition.setUp", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestCournotCompetition.setUp", "type": "function", "doc": "<p>Hook method for setting up the test fixture before exercising it.</p>\n", "signature": "(self) -> None", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestCournotCompetition.setupModel", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestCournotCompetition.setupModel", "type": "function", "doc": "<p>Sets up a model for a test.</p>\n\n<p>The type of the model is corresponding to the testcase.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>**kwargs</strong>: Parameter values for the model</li>\n</ul>\n", "signature": "(self, **kwargs) -> None", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestCournotCompetition.calculate_properties_profits_consumer_surplus", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestCournotCompetition.calculate_properties_profits_consumer_surplus", "type": "function", "doc": "<p>Calculates the properties defined by the cournot competition.</p>\n\n<p>As default gamma is assumed to be 0.3.</p>\n", "signature": "(self) -> None", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestCournotCompetition.get_welfare_value", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestCournotCompetition.get_welfare_value", "type": "function", "doc": "<p>Calculates the default value of welfare for a specific model and market situation.</p>\n\n<p>Market situations:</p>\n\n<ul>\n<li>duopoly</li>\n<li>monopoly with innovation</li>\n<li>monopoly without innovation</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>market_situation</strong> (Literal[\"duopoly\", \"with_innovation\", \"without_innovation\"]):\nTo calculate the total welfare for</li>\n<li><strong>model</strong>: Type of the model to get the default value from</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Default value of the total welfare</li>\n</ul>\n", "signature": "(self, market_situation: str, **kwargs) -> float", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestCournotCompetition.test_properties_profits_consumer_surplus", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestCournotCompetition.test_properties_profits_consumer_surplus", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestCournotCompetition.test_intermediate_optimal_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestCournotCompetition.test_intermediate_optimal_merger_policy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestCournotCompetition.test_string_representation", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestCournotCompetition.test_string_representation", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestCournotCompetition.test_laissez_faire_optimal_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestCournotCompetition.test_laissez_faire_optimal_merger_policy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestCournotCompetition.test_tolerated_harm_strict", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestCournotCompetition.test_tolerated_harm_strict", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestCournotCompetition.test_tolerated_harm_intermediate_late_takeover_allowed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestCournotCompetition.test_tolerated_harm_intermediate_late_takeover_allowed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestCournotCompetition.test_tolerated_harm_intermediate_late_takeover_prohibited", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestCournotCompetition.test_tolerated_harm_intermediate_late_takeover_prohibited", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestCournotCompetition.test_tolerated_harm_laissez_faire", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestCournotCompetition.test_tolerated_harm_laissez_faire", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestPerfectInformation", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestPerfectInformation", "type": "class", "doc": "<p>Tests Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.PerfectInformation.</p>\n", "bases": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestOptimalMergerPolicy"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestPerfectInformation.setupModel", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestPerfectInformation.setupModel", "type": "function", "doc": "<p>Sets up a model for a test.</p>\n\n<p>The type of the model is corresponding to the testcase.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>**kwargs</strong>: Parameter values for the model</li>\n</ul>\n", "signature": "(self, **kwargs) -> None", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestPerfectInformation.test_tolerated_harm_intermediate_late_takeover_allowed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestPerfectInformation.test_tolerated_harm_intermediate_late_takeover_allowed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestPerfectInformation.test_set_invalid_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestPerfectInformation.test_set_invalid_merger_policy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestPerfectInformation.test_laissez_faire_optimal_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestPerfectInformation.test_laissez_faire_optimal_merger_policy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestStrictPerfectInformation", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestStrictPerfectInformation", "type": "class", "doc": "<p>Tests Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.PerfectInformation.</p>\n", "bases": "TestPerfectInformation"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestStrictPerfectInformation.test_not_profitable_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestStrictPerfectInformation.test_not_profitable_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestStrictPerfectInformation.test_not_profitable_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestStrictPerfectInformation.test_not_profitable_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestStrictPerfectInformation.test_profitable_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestStrictPerfectInformation.test_profitable_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestStrictPerfectInformation.test_profitable_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestStrictPerfectInformation.test_profitable_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestIntermediatePerfectInformation", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestIntermediatePerfectInformation", "type": "class", "doc": "<p>Tests Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.PerfectInformation.</p>\n", "bases": "TestPerfectInformation"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestIntermediatePerfectInformation.test_not_profitable_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestIntermediatePerfectInformation.test_not_profitable_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestIntermediatePerfectInformation.test_not_profitable_not_credit_rationed_unsuccessful", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestIntermediatePerfectInformation.test_not_profitable_not_credit_rationed_unsuccessful", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestIntermediatePerfectInformation.test_profitable_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestIntermediatePerfectInformation.test_profitable_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestIntermediatePerfectInformation.test_profitable_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestIntermediatePerfectInformation.test_profitable_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestLaissezFairePerfectInformation", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestLaissezFairePerfectInformation", "type": "class", "doc": "<p>Tests Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.PerfectInformation.</p>\n", "bases": "TestPerfectInformation"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestLaissezFairePerfectInformation.test_not_profitable_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestLaissezFairePerfectInformation.test_not_profitable_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestLaissezFairePerfectInformation.test_not_profitable_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestLaissezFairePerfectInformation.test_not_profitable_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestLaissezFairePerfectInformation.test_profitable_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestLaissezFairePerfectInformation.test_profitable_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestLaissezFairePerfectInformation.test_profitable_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestLaissezFairePerfectInformation.test_profitable_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestEquityContract", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestEquityContract", "type": "class", "doc": "<p>Tests Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.EquityContract.</p>\n", "bases": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestOptimalMergerPolicy"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestEquityContract.setupModel", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestEquityContract.setupModel", "type": "function", "doc": "<p>Sets up a model for a test.</p>\n\n<p>The type of the model is corresponding to the testcase.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>**kwargs</strong>: Parameter values for the model</li>\n</ul>\n", "signature": "(self, **kwargs) -> None", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestEquityContract.test_thresholds", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestEquityContract.test_thresholds", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestEquityContract.test_debt_not_preferred", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestEquityContract.test_debt_not_preferred", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestEquityContract.test_debt_preferred", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestEquityContract.test_debt_preferred", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestEquityContract.test_intermediate_optimal_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestEquityContract.test_intermediate_optimal_merger_policy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended.TestEquityContract.test_laissez_faire_optimal_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_BaseExtended", "qualname": "TestEquityContract.test_laissez_faire_optimal_merger_policy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Configurations", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Configurations", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Configurations.TestLoadParameters", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Configurations", "qualname": "TestLoadParameters", "type": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Configurations.TestLoadParameters.setUpModel", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Configurations", "qualname": "TestLoadParameters.setUpModel", "type": "function", "doc": "<p></p>\n", "signature": "(self, config_id: int)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Configurations.TestLoadParameters.test_config_loading", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Configurations", "qualname": "TestLoadParameters.test_config_loading", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Configurations.TestLoadParameters.test_startup_assets", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Configurations", "qualname": "TestLoadParameters.test_startup_assets", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Configurations.TestLoadParameters.test_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Configurations", "qualname": "TestLoadParameters.test_merger_policy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Configurations.TestLoadParameters.test_toggle_development_success", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Configurations", "qualname": "TestLoadParameters.test_toggle_development_success", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Configurations.TestLoadParameters.test_adjust_parameter", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Configurations", "qualname": "TestLoadParameters.test_adjust_parameter", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Configurations.TestLoadParameters.test_load_unavailable_id", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Configurations", "qualname": "TestLoadParameters.test_load_unavailable_id", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Distributions", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Distributions", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Distributions.TestNormalDistributionFunction", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Distributions", "qualname": "TestNormalDistributionFunction", "type": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Distributions.TestNormalDistributionFunction.test_cumulative_function", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Distributions", "qualname": "TestNormalDistributionFunction.test_cumulative_function", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Distributions.TestNormalDistributionFunction.test_cumulative_function_adjusted_scale", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Distributions", "qualname": "TestNormalDistributionFunction.test_cumulative_function_adjusted_scale", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Distributions.TestNormalDistributionFunction.test_inverse_cumulative_function", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Distributions", "qualname": "TestNormalDistributionFunction.test_inverse_cumulative_function", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Distributions.TestNormalDistributionFunction.test_inverse_cumulative_function_adjusted_loc", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Distributions", "qualname": "TestNormalDistributionFunction.test_inverse_cumulative_function_adjusted_loc", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Distributions.TestUniformDistributionFunction", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Distributions", "qualname": "TestUniformDistributionFunction", "type": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "TestNormalDistributionFunction"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Distributions.TestUniformDistributionFunction.test_cumulative_function", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Distributions", "qualname": "TestUniformDistributionFunction.test_cumulative_function", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Distributions.TestUniformDistributionFunction.test_cumulative_function_adjusted_scale", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Distributions", "qualname": "TestUniformDistributionFunction.test_cumulative_function_adjusted_scale", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Distributions.TestUniformDistributionFunction.test_inverse_cumulative_function", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Distributions", "qualname": "TestUniformDistributionFunction.test_inverse_cumulative_function", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Distributions.TestUniformDistributionFunction.test_inverse_cumulative_function_adjusted_loc", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Distributions", "qualname": "TestUniformDistributionFunction.test_inverse_cumulative_function_adjusted_loc", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestProCompetitive", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestProCompetitive", "type": "class", "doc": "<p>Tests Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy.</p>\n", "bases": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Base.TestOptimalMergerPolicy"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestProCompetitive.setupModel", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestProCompetitive.setupModel", "type": "function", "doc": "<p>Sets up a model for a test.</p>\n\n<p>The type of the model is corresponding to the testcase.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>**kwargs</strong>: Parameter values for the model</li>\n</ul>\n", "signature": "(self, **kwargs) -> None", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestProCompetitive.test_tolerated_harm_strict", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestProCompetitive.test_tolerated_harm_strict", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestProCompetitive.test_tolerated_harm_intermediate_late_takeover_prohibited", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestProCompetitive.test_tolerated_harm_intermediate_late_takeover_prohibited", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestProCompetitive.test_tolerated_harm_intermediate_late_takeover_allowed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestProCompetitive.test_tolerated_harm_intermediate_late_takeover_allowed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestProCompetitive.test_laissez_faire_optimal_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestProCompetitive.test_laissez_faire_optimal_merger_policy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestProCompetitive.test_intermediate_optimal_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestProCompetitive.test_intermediate_optimal_merger_policy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestProCompetitive.test_strict_optimal_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestProCompetitive.test_strict_optimal_merger_policy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestStrictProCompetitive", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestStrictProCompetitive", "type": "class", "doc": "<p>Tests Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy.</p>\n", "bases": "TestProCompetitive"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestStrictProCompetitive.test_not_profitable", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestStrictProCompetitive.test_not_profitable", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestIntermediateLateTakeoverProhibitedProCompetitive", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestIntermediateLateTakeoverProhibitedProCompetitive", "type": "class", "doc": "<p>Tests Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy.</p>\n", "bases": "TestProCompetitive"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestIntermediateLateTakeoverProhibitedProCompetitive.test_not_profitable_above_threshold", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestIntermediateLateTakeoverProhibitedProCompetitive.test_not_profitable_above_threshold", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestIntermediateLateTakeoverProhibitedProCompetitive.test_not_profitable_below_threshold", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestIntermediateLateTakeoverProhibitedProCompetitive.test_not_profitable_below_threshold", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestIntermediateLateTakeoverAllowedProCompetitive", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestIntermediateLateTakeoverAllowedProCompetitive", "type": "class", "doc": "<p>Tests Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy.</p>\n", "bases": "TestProCompetitive"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestIntermediateLateTakeoverAllowedProCompetitive.test_not_profitable_above_threshold_not_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestIntermediateLateTakeoverAllowedProCompetitive.test_not_profitable_above_threshold_not_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestIntermediateLateTakeoverAllowedProCompetitive.test_not_profitable_above_threshold_not_credit_rationed_unsuccessful", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestIntermediateLateTakeoverAllowedProCompetitive.test_not_profitable_above_threshold_not_credit_rationed_unsuccessful", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestIntermediateLateTakeoverAllowedProCompetitive.test_not_profitable_above_threshold_credit_rationed", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestIntermediateLateTakeoverAllowedProCompetitive.test_not_profitable_above_threshold_credit_rationed", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestIntermediateLateTakeoverAllowedProCompetitive.test_not_profitable_below_threshold", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestIntermediateLateTakeoverAllowedProCompetitive.test_not_profitable_below_threshold", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestResourceWaste", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestResourceWaste", "type": "class", "doc": "<p>Tests Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy.</p>\n", "bases": "TestProCompetitive"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestResourceWaste.setupModel", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestResourceWaste.setupModel", "type": "function", "doc": "<p>Sets up a model for a test.</p>\n\n<p>The type of the model is corresponding to the testcase.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>**kwargs</strong>: Parameter values for the model</li>\n</ul>\n", "signature": "(self, **kwargs) -> None", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestResourceWaste.test_tolerated_harm_intermediate_late_takeover_prohibited", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestResourceWaste.test_tolerated_harm_intermediate_late_takeover_prohibited", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestResourceWaste.test_string_representation", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestResourceWaste.test_string_representation", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestResourceWaste.test_not_profitable_above_threshold", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestResourceWaste.test_not_profitable_above_threshold", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestResourceWaste.test_not_profitable_below_threshold", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestResourceWaste.test_not_profitable_below_threshold", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestResourceWaste.test_intermediate_optimal_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestResourceWaste.test_intermediate_optimal_merger_policy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestResourceWaste.test_laissez_faire_optimal_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestResourceWaste.test_laissez_faire_optimal_merger_policy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestResourceWaste.test_strict_optimal_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestResourceWaste.test_strict_optimal_merger_policy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension.TestResourceWaste.test_strict_optimal_merger_policy_summary", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Extension", "qualname": "TestResourceWaste.test_strict_optimal_merger_policy_summary", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_NotebookUtilities", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_NotebookUtilities", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_NotebookUtilities.TestUtilities", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_NotebookUtilities", "qualname": "TestUtilities", "type": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_NotebookUtilities.TestUtilities.test_get_model_by_id_optimal_merger_policy", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_NotebookUtilities", "qualname": "TestUtilities.test_get_model_by_id_optimal_merger_policy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_NotebookUtilities.TestUtilities.test_get_model_by_id_pro_competitive", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_NotebookUtilities", "qualname": "TestUtilities.test_get_model_by_id_pro_competitive", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_NotebookUtilities.TestUtilities.test_get_model_by_id_resource_waste", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_NotebookUtilities", "qualname": "TestUtilities.test_get_model_by_id_resource_waste", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_NotebookUtilities.TestUtilities.test_get_model_by_id_custom_type", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_NotebookUtilities", "qualname": "TestUtilities.test_get_model_by_id_custom_type", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_NotebookUtilities.TestUtilities.test_configure_axes_first_model_invalid", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_NotebookUtilities", "qualname": "TestUtilities.test_configure_axes_first_model_invalid", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_NotebookUtilities.TestUtilities.test_configure_axes_second_model_invalid", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_NotebookUtilities", "qualname": "TestUtilities.test_configure_axes_second_model_invalid", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_NotebookUtilities.TestUtilities.test_configure_valid_models", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_NotebookUtilities", "qualname": "TestUtilities.test_configure_valid_models", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_NotebookUtilities.TestUtilities.test_configure_default", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_NotebookUtilities", "qualname": "TestUtilities.test_configure_default", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Types", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Types", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Types.TestThresholdItem", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Types", "qualname": "TestThresholdItem", "type": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Types.TestThresholdItem.test_comparison_true_unequal", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Types", "qualname": "TestThresholdItem.test_comparison_true_unequal", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Types.TestThresholdItem.test_comparison_false_unequal", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Types", "qualname": "TestThresholdItem.test_comparison_false_unequal", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Types.TestThresholdItem.test_comparison_true_equal", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Types", "qualname": "TestThresholdItem.test_comparison_true_equal", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Types.TestThresholdItem.test_comparison_false_equal", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Types", "qualname": "TestThresholdItem.test_comparison_false_equal", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Types.TestThresholdItem.test_max_list", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Types", "qualname": "TestThresholdItem.test_max_list", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Types.TestThresholdItem.test_min_list", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Types", "qualname": "TestThresholdItem.test_min_list", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Types.TestThresholdItem.test_include", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Types", "qualname": "TestThresholdItem.test_include", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.CoreVisualizationTest", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "CoreVisualizationTest", "type": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.CoreVisualizationTest.show_all", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "CoreVisualizationTest.show_all", "type": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": " = False"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.CoreVisualizationTest.setUp", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "CoreVisualizationTest.setUp", "type": "function", "doc": "<p>Hook method for setting up the test fixture before exercising it.</p>\n", "signature": "(self) -> None", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.CoreVisualizationTest.setUpMock", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "CoreVisualizationTest.setUpMock", "type": "function", "doc": "<p></p>\n", "signature": "(self, **kwargs) -> None", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.CoreVisualizationTest.setUpVisualizerCall", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "CoreVisualizationTest.setUpVisualizerCall", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    plot_type: Callable,\n    show_plot: bool = False,\n    never_show_plot: bool = False,\n    show_plot_now: bool = False,\n    **kwargs\n) -> None", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.CoreVisualizationTest.tearDown", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "CoreVisualizationTest.tearDown", "type": "function", "doc": "<p>Hook method for deconstructing the test fixture after testing it.</p>\n", "signature": "(self) -> None", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.CoreVisualizationTest.show_figure", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "CoreVisualizationTest.show_figure", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> None", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.CoreVisualizationTest.test_plot_interface", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "CoreVisualizationTest.test_plot_interface", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.TestVisualize", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "TestVisualize", "type": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "CoreVisualizationTest"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.TestVisualize.test_timeline_plot", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "TestVisualize.test_timeline_plot", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.TestVisualize.test_timeline_plot_takeover_development_not_successful", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "TestVisualize.test_timeline_plot_takeover_development_not_successful", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.TestVisualize.test_timeline_plot_takeover_shelving_credit_constraint", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "TestVisualize.test_timeline_plot_takeover_shelving_credit_constraint", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.TestVisualize.test_timeline_set_model", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "TestVisualize.test_timeline_set_model", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.TestVisualize.test_payoff_plot", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "TestVisualize.test_payoff_plot", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.TestVisualize.test_overview_plot", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "TestVisualize.test_overview_plot", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.TestVisualize.test_perfect_information_asset_range", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "TestVisualize.test_perfect_information_asset_range", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.TestVisualize.test_perfect_information_overview", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "TestVisualize.test_perfect_information_overview", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.TestVisualizeRanges", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "TestVisualizeRanges", "type": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "CoreVisualizationTest"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.TestVisualizeRanges.test_essential_asset_thresholds", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "TestVisualizeRanges.test_essential_asset_thresholds", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.TestVisualizeRanges.test_essential_asset_thresholds_negative_values", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "TestVisualizeRanges.test_essential_asset_thresholds_negative_values", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.TestVisualizeRanges.test_outcomes_asset_range", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "TestVisualizeRanges.test_outcomes_asset_range", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.TestVisualizeRanges.test_asset_range_plot_negative_threshold", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "TestVisualizeRanges.test_asset_range_plot_negative_threshold", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.TestVisualizeRanges.test_asset_range_plot", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "TestVisualizeRanges.test_asset_range_plot", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.TestVisualizeRanges.test_asset_range_set_model", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "TestVisualizeRanges.test_asset_range_set_model", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.TestVisualizeRanges.test_outcomes_merger_policies", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "TestVisualizeRanges.test_outcomes_merger_policies", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize.TestVisualizeRanges.test_merger_policies_plot", "modulename": "Fumagalli_Motta_Tarantino_2020.Tests.Test_Visualize", "qualname": "TestVisualizeRanges.test_merger_policies_plot", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations", "type": "module", "doc": "<p>This submodule provides the implementations for the visualization of the models in Fumagalli_Motta_Tarantino_2020.Models.</p>\n\n<h2 id=\"basic-usage\">Basic Usage</h2>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">Fumagalli_Motta_Tarantino_2020</span> <span class=\"k\">as</span> <span class=\"nn\">FMT20</span>\n\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">FMT20</span><span class=\"o\">.</span><span class=\"n\">OptimalMergerPolicy</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># see list below for available visualizations</span>\n<span class=\"n\">visualizer</span> <span class=\"o\">=</span> <span class=\"n\">FMT20</span><span class=\"o\">.</span><span class=\"n\">Overview</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># show the plot in a canvas</span>\n<span class=\"n\">visualizer</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># exceptional use for Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.PerfectInformation</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">FMT20</span><span class=\"o\">.</span><span class=\"n\">PerfectInformation</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># for the outcome for different merger policies over range of assets</span>\n<span class=\"n\">visualizer_perfect_information</span> <span class=\"o\">=</span> <span class=\"n\">FMT20</span><span class=\"o\">.</span><span class=\"n\">MergerPoliciesAssetRangePerfectInformation</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n<span class=\"n\">visualizer_perfect_information</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<h2 id=\"available-visualizations\">Available Visualizations</h2>\n\n<p>The following models are available:</p>\n\n<ul>\n<li>Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize.IVisualize\n<ul>\n<li>Interface for all visualizations</li>\n<li>Do not try to initialize this class, it will fail for sure sooner or later</li>\n</ul></li>\n<li>Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize.Timeline ($\\Rightarrow$ inherits from Visualize.IVisualize)\n<ul>\n<li>Timeline of events for a specific model</li>\n</ul></li>\n<li>Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize.Payoffs ($\\Rightarrow$ inherits from Visualize.IVisualize)\n<ul>\n<li>Payoffs for different market configurations and stakeholders in a specific model</li>\n</ul></li>\n<li>Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges.AssetRange ($\\Rightarrow$ inherits from Visualize.IVisualize)\n<ul>\n<li>Outcomes for the set merger policy over a range of assets</li>\n</ul></li>\n<li>Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges.MergerPoliciesAssetRange ($\\Rightarrow$ inherits from VisualizeRanges.AssetRange)\n<ul>\n<li>Outcomes for the all available merger policies over a range of assets</li>\n</ul></li>\n<li>Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges.MergerPoliciesAssetRangePerfectInformation ($\\Rightarrow$ inherits from VisualizeRanges.MergerPoliciesAssetRange)\n<ul>\n<li>Outcomes for the set merger policy over a range of assets for Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.PerfectInformation</li>\n</ul></li>\n<li>Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges.Overview ($\\Rightarrow$ inherits from Visualize.IVisualize)\n<ul>\n<li>Combines Timeline, Payoffs and MergerPoliciesAssetRange for a specific model in one plot</li>\n</ul></li>\n</ul>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize.IVisualize", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize", "qualname": "IVisualize", "type": "class", "doc": "<p>Interface for all visualization classes containing useful methods.</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This module is compatible with python versions starting from 3.9, due to introduction of PEP 585. Therefore, the compatibility\nwith mybinder.org is not guaranteed (uses at the moment python 3.7).</p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize.IVisualize.__init__", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize", "qualname": "IVisualize.__init__", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong> (Fumagalli_Motta_Tarantino_2020.Models.OptimalMergerPolicy):\nModel to create the visualization from.</li>\n<li><strong>ax</strong> (Optional[matplotlib.pyplot.Axes]):\nAxes used for the plot, if not specified, a new set of axes is generated.</li>\n<li><strong>default_style</strong> (bool):\nIf true, default matplotlib style is used.</li>\n<li><strong>dark_mode</strong>: If true, dark mode is used.</li>\n<li><strong>**kwargs</strong>: Arguments for the creation of a new figure.</li>\n</ul>\n", "signature": "(\n    self,\n    model: Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy,\n    ax: Optional[matplotlib.axes._axes.Axes] = None,\n    default_style=True,\n    dark_mode=False,\n    **kwargs\n)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize.IVisualize.colors", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize", "qualname": "IVisualize.colors", "type": "variable", "doc": "<p>Standard colors used in visualizations.</p>\n", "annotation": ": list[str]", "default_value": " = ['indianred', 'salmon', 'khaki', 'greenyellow', 'limegreen', 'turquoise', 'powderblue', 'lavender', 'thistle', 'lavenderblush', 'pink']"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize.IVisualize.fontsize", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize", "qualname": "IVisualize.fontsize", "type": "variable", "doc": "<p>Default font size</p>\n", "default_value": " = 'x-small'"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize.IVisualize.set_model", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize", "qualname": "IVisualize.set_model", "type": "function", "doc": "<p>Change the model for the visualization.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">Fumagalli_Motta_Tarantino_2020</span> <span class=\"k\">as</span> <span class=\"nn\">FMT20</span>\n\n<span class=\"n\">model_one</span> <span class=\"o\">=</span> <span class=\"n\">FMT20</span><span class=\"o\">.</span><span class=\"n\">OptimalMergerPolicy</span><span class=\"p\">()</span>\n<span class=\"n\">model_two</span> <span class=\"o\">=</span> <span class=\"n\">FMT20</span><span class=\"o\">.</span><span class=\"n\">OptimalMergerPolicy</span><span class=\"p\">(</span><span class=\"n\">development_success</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">visualizer</span> <span class=\"o\">=</span> <span class=\"n\">FMT20</span><span class=\"o\">.</span><span class=\"n\">MergerPoliciesAssetRange</span><span class=\"p\">(</span><span class=\"n\">model_one</span><span class=\"p\">)</span>\n<span class=\"n\">visualizer</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n<span class=\"c1\"># set the new model</span>\n<span class=\"n\">visualizer</span><span class=\"o\">.</span><span class=\"n\">set_model</span><span class=\"p\">(</span><span class=\"n\">model_two</span><span class=\"p\">)</span>\n<span class=\"c1\"># replot (overwrites the previous plot)</span>\n<span class=\"n\">visualizer</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong> (Fumagalli_Motta_Tarantino_2020.Models.OptimalMergerPolicy):\nNew model to generate the plots from.</li>\n</ul>\n", "signature": "(\n    self,\n    model: Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy\n) -> None", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize.IVisualize.plot", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize", "qualname": "IVisualize.plot", "type": "function", "doc": "<p>Plots the visual representation for the object.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<pre><code>model = Models.OptimalMergerPolicy()\nvisualizer = MergerPoliciesAssetRange(m)\nfig, ax = visualizer.plot()\n# use the figure and axes as you wish, but for example:\nfig.show()\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kwargs</strong>: Options for the plots for further customization.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Figure</strong>: Containing the axes with the plots (use Figure.show() to display).</li>\n<li><strong>Axes</strong>: Containing the plots (arrange custom summary).</li>\n</ul>\n", "signature": "(\n    self,\n    **kwargs\n) -> (<class 'matplotlib.figure.Figure'>, <class 'matplotlib.axes._axes.Axes'>)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize.IVisualize.show", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize", "qualname": "IVisualize.show", "type": "function", "doc": "<p>Shows the visual representation for the object.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<pre><code>model = Models.OptimalMergerPolicy()\nvisualizer = MergerPoliciesAssetRange(m)\nvisualizer.show()\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kwargs</strong>: Same options as Fumagalli_Motta_Tarantino_2020.Visualize.IVisualize.plot.</li>\n</ul>\n", "signature": "(self, **kwargs) -> None", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize.Timeline", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize", "qualname": "Timeline", "type": "class", "doc": "<p>Visualizes the timeline of events for a specific model.</p>\n", "bases": "IVisualize"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize.Timeline.__init__", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize", "qualname": "Timeline.__init__", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong> (Fumagalli_Motta_Tarantino_2020.Models.OptimalMergerPolicy):\nModel to create the visualization from.</li>\n<li><strong>ax</strong> (Optional[matplotlib.pyplot.Axes]):\nAxes used for the plot, if not specified, a new set of axes is generated.</li>\n<li><strong>default_style</strong> (bool):\nIf true, default matplotlib style is used.</li>\n<li><strong>dark_mode</strong>: If true, dark mode is used.</li>\n<li><strong>**kwargs</strong>: Arguments for the creation of a new figure.</li>\n</ul>\n", "signature": "(\n    self,\n    model: Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy,\n    **kwargs\n)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize.Timeline.plot", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize", "qualname": "Timeline.plot", "type": "function", "doc": "<p>Plots the visual representation for the object.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<pre><code>model = Models.OptimalMergerPolicy()\nvisualizer = MergerPoliciesAssetRange(m)\nfig, ax = visualizer.plot()\n# use the figure and axes as you wish, but for example:\nfig.show()\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kwargs</strong>: Options for the plots for further customization.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Figure</strong>: Containing the axes with the plots (use Figure.show() to display).</li>\n<li><strong>Axes</strong>: Containing the plots (arrange custom summary).</li>\n</ul>\n", "signature": "(\n    self,\n    **kwargs\n) -> (<class 'matplotlib.figure.Figure'>, <class 'matplotlib.axes._axes.Axes'>)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize.Payoffs", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize", "qualname": "Payoffs", "type": "class", "doc": "<p>Visualizes the payoffs for a specific model.</p>\n", "bases": "IVisualize"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize.Payoffs.plot", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize", "qualname": "Payoffs.plot", "type": "function", "doc": "<p>Plots the visual representation for the object.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<pre><code>model = Models.OptimalMergerPolicy()\nvisualizer = MergerPoliciesAssetRange(m)\nfig, ax = visualizer.plot()\n# use the figure and axes as you wish, but for example:\nfig.show()\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kwargs</strong>: Options for the plots for further customization.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Figure</strong>: Containing the axes with the plots (use Figure.show() to display).</li>\n<li><strong>Axes</strong>: Containing the plots (arrange custom summary).</li>\n</ul>\n", "signature": "(\n    self,\n    **kwargs\n) -> (<class 'matplotlib.figure.Figure'>, <class 'matplotlib.axes._axes.Axes'>)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges.AssetRange", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges", "qualname": "AssetRange", "type": "class", "doc": "<p>Visualizes the outcomes over an assets range for a specific model.</p>\n", "bases": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize.IVisualize"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges.AssetRange.__init__", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges", "qualname": "AssetRange.__init__", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong> (Fumagalli_Motta_Tarantino_2020.Models.OptimalMergerPolicy):\nModel to create the visualization from.</li>\n<li><strong>ax</strong> (Optional[matplotlib.pyplot.Axes]):\nAxes used for the plot, if not specified, a new set of axes is generated.</li>\n<li><strong>default_style</strong> (bool):\nIf true, default matplotlib style is used.</li>\n<li><strong>dark_mode</strong>: If true, dark mode is used.</li>\n<li><strong>**kwargs</strong>: Arguments for the creation of a new figure.</li>\n</ul>\n", "signature": "(\n    self,\n    model: Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy,\n    **kwargs\n)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges.AssetRange.colors", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges", "qualname": "AssetRange.colors", "type": "variable", "doc": "<p>Standard colors used in visualizations.</p>\n", "annotation": ": dict[str, str]", "default_value": " = ['indianred', 'salmon', 'khaki', 'greenyellow', 'limegreen', 'turquoise', 'powderblue', 'lavender', 'thistle', 'lavenderblush', 'pink']"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges.AssetRange.set_model", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges", "qualname": "AssetRange.set_model", "type": "function", "doc": "<p>Change the model for the visualization.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">Fumagalli_Motta_Tarantino_2020</span> <span class=\"k\">as</span> <span class=\"nn\">FMT20</span>\n\n<span class=\"n\">model_one</span> <span class=\"o\">=</span> <span class=\"n\">FMT20</span><span class=\"o\">.</span><span class=\"n\">OptimalMergerPolicy</span><span class=\"p\">()</span>\n<span class=\"n\">model_two</span> <span class=\"o\">=</span> <span class=\"n\">FMT20</span><span class=\"o\">.</span><span class=\"n\">OptimalMergerPolicy</span><span class=\"p\">(</span><span class=\"n\">development_success</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">visualizer</span> <span class=\"o\">=</span> <span class=\"n\">FMT20</span><span class=\"o\">.</span><span class=\"n\">MergerPoliciesAssetRange</span><span class=\"p\">(</span><span class=\"n\">model_one</span><span class=\"p\">)</span>\n<span class=\"n\">visualizer</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n<span class=\"c1\"># set the new model</span>\n<span class=\"n\">visualizer</span><span class=\"o\">.</span><span class=\"n\">set_model</span><span class=\"p\">(</span><span class=\"n\">model_two</span><span class=\"p\">)</span>\n<span class=\"c1\"># replot (overwrites the previous plot)</span>\n<span class=\"n\">visualizer</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong> (Fumagalli_Motta_Tarantino_2020.Models.OptimalMergerPolicy):\nNew model to generate the plots from.</li>\n</ul>\n", "signature": "(\n    self,\n    model: Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy\n) -> None", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges.AssetRange.plot", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges", "qualname": "AssetRange.plot", "type": "function", "doc": "<p>Plots the visual representation for the object.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<pre><code>model = Models.OptimalMergerPolicy()\nvisualizer = MergerPoliciesAssetRange(m)\nfig, ax = visualizer.plot()\n# use the figure and axes as you wish, but for example:\nfig.show()\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kwargs</strong>: Options for the plots for further customization.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Figure</strong>: Containing the axes with the plots (use Figure.show() to display).</li>\n<li><strong>Axes</strong>: Containing the plots (arrange custom summary).</li>\n</ul>\n", "signature": "(\n    self,\n    **kwargs\n) -> (<class 'matplotlib.figure.Figure'>, <class 'matplotlib.axes._axes.Axes'>)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges.MergerPoliciesAssetRange", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges", "qualname": "MergerPoliciesAssetRange", "type": "class", "doc": "<p>Visualizes the outcomes over an assets range for a specific model.</p>\n", "bases": "AssetRange"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges.MergerPoliciesAssetRange.__init__", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges", "qualname": "MergerPoliciesAssetRange.__init__", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong> (Fumagalli_Motta_Tarantino_2020.Models.OptimalMergerPolicy):\nModel to create the visualization from.</li>\n<li><strong>ax</strong> (Optional[matplotlib.pyplot.Axes]):\nAxes used for the plot, if not specified, a new set of axes is generated.</li>\n<li><strong>default_style</strong> (bool):\nIf true, default matplotlib style is used.</li>\n<li><strong>dark_mode</strong>: If true, dark mode is used.</li>\n<li><strong>**kwargs</strong>: Arguments for the creation of a new figure.</li>\n</ul>\n", "signature": "(\n    self,\n    model: Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy,\n    **kwargs\n)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges.MergerPoliciesAssetRangePerfectInformation", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges", "qualname": "MergerPoliciesAssetRangePerfectInformation", "type": "class", "doc": "<p>Visualizes the outcomes over an assets range for a specific model.</p>\n", "bases": "MergerPoliciesAssetRange"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges.MergerPoliciesAssetRangePerfectInformation.__init__", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges", "qualname": "MergerPoliciesAssetRangePerfectInformation.__init__", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong> (Fumagalli_Motta_Tarantino_2020.Models.OptimalMergerPolicy):\nModel to create the visualization from.</li>\n<li><strong>ax</strong> (Optional[matplotlib.pyplot.Axes]):\nAxes used for the plot, if not specified, a new set of axes is generated.</li>\n<li><strong>default_style</strong> (bool):\nIf true, default matplotlib style is used.</li>\n<li><strong>dark_mode</strong>: If true, dark mode is used.</li>\n<li><strong>**kwargs</strong>: Arguments for the creation of a new figure.</li>\n</ul>\n", "signature": "(\n    self,\n    model: Fumagalli_Motta_Tarantino_2020.Models.BaseExtended.PerfectInformation,\n    **kwargs\n)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges.MergerPoliciesAssetRangePerfectInformation.plot", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges", "qualname": "MergerPoliciesAssetRangePerfectInformation.plot", "type": "function", "doc": "<p>Plots the visual representation for the object.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<pre><code>model = Models.OptimalMergerPolicy()\nvisualizer = MergerPoliciesAssetRange(m)\nfig, ax = visualizer.plot()\n# use the figure and axes as you wish, but for example:\nfig.show()\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kwargs</strong>: Options for the plots for further customization.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Figure</strong>: Containing the axes with the plots (use Figure.show() to display).</li>\n<li><strong>Axes</strong>: Containing the plots (arrange custom summary).</li>\n</ul>\n", "signature": "(\n    self,\n    **kwargs\n) -> (<class 'matplotlib.figure.Figure'>, <class 'matplotlib.axes._axes.Axes'>)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges.Overview", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges", "qualname": "Overview", "type": "class", "doc": "<p>Interface for all visualization classes containing useful methods.</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This module is compatible with python versions starting from 3.9, due to introduction of PEP 585. Therefore, the compatibility\nwith mybinder.org is not guaranteed (uses at the moment python 3.7).</p>\n", "bases": "Fumagalli_Motta_Tarantino_2020.Visualizations.Visualize.IVisualize"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges.Overview.__init__", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges", "qualname": "Overview.__init__", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong> (Fumagalli_Motta_Tarantino_2020.Models.OptimalMergerPolicy):\nModel to create the visualization from.</li>\n<li><strong>ax</strong> (Optional[matplotlib.pyplot.Axes]):\nAxes used for the plot, if not specified, a new set of axes is generated.</li>\n<li><strong>default_style</strong> (bool):\nIf true, default matplotlib style is used.</li>\n<li><strong>dark_mode</strong>: If true, dark mode is used.</li>\n<li><strong>**kwargs</strong>: Arguments for the creation of a new figure.</li>\n</ul>\n", "signature": "(\n    self,\n    model: Fumagalli_Motta_Tarantino_2020.Models.Base.OptimalMergerPolicy,\n    figsize=(14, 10),\n    **kwargs\n)", "funcdef": "def"}, {"fullname": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges.Overview.plot", "modulename": "Fumagalli_Motta_Tarantino_2020.Visualizations.VisualizeRanges", "qualname": "Overview.plot", "type": "function", "doc": "<p>Plots the visual representation for the object.</p>\n\n<h6 id=\"example\">Example</h6>\n\n<pre><code>model = Models.OptimalMergerPolicy()\nvisualizer = MergerPoliciesAssetRange(m)\nfig, ax = visualizer.plot()\n# use the figure and axes as you wish, but for example:\nfig.show()\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kwargs</strong>: Options for the plots for further customization.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Figure</strong>: Containing the axes with the plots (use Figure.show() to display).</li>\n<li><strong>Axes</strong>: Containing the plots (arrange custom summary).</li>\n</ul>\n", "signature": "(\n    self,\n    **kwargs\n) -> (<class 'matplotlib.figure.Figure'>, <class 'matplotlib.axes._axes.Axes'>)", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();